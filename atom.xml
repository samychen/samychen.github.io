<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SamyChen</title>
  <icon>https://www.gravatar.com/avatar/e9c9d34132cf893446c55d87da6fcf36</icon>
  <subtitle>SamyChen的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://samychen.com/"/>
  <updated>2018-02-24T07:40:23.446Z</updated>
  <id>http://samychen.com/</id>
  
  <author>
    <name>SamyChen</name>
    <email>samychen2016@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>身份证识别</title>
    <link href="http://samychen.com/2018/02/21/%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB/"/>
    <id>http://samychen.com/2018/02/21/身份证识别/</id>
    <published>2018-02-21T09:39:45.000Z</published>
    <updated>2018-02-24T07:40:23.446Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前面介绍了好些OpenCV基本知识之后，现在我们小试牛刀，稍微写个身份证识别功能出来，这里我们就把工程移植到安卓平台，其实核心业务逻辑是完全一样的。<br>项目地址：<a href="https://github.com/samychen/IDcardRecognization.git" target="_blank" rel="external">https://github.com/samychen/IDcardRecognization.git</a><br>&emsp;&emsp;我们知道身份证上那么多文字，我们怎么知道去哪拿身份证号码？</p><p>&emsp;&emsp;居民二代身份证除了基本信息不同，其他地方都是模板样式，那么我们可以先把敏感信息找到，也就是把身份证号码那一块区域先找到，我们可以把公民身份证那块区别作为匹配模板，找到整张图片的模板所在的区域，而OpenCV刚好提供了模板匹配的方法<code>matchTemplate( InputArray image, InputArray templ,OutputArray result, int method, InputArray mask = noArray() )</code><br><img src="http://upload-images.jianshu.io/upload_images/4398977-5ac71527080936b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="身份证样板.png"></p><p>&emsp;&emsp;通过这个方法我们就找到了模板所在的区域，这下子是不是与想法了，我们拿到模板矩阵像素坐标后，是不是可以根据身份证像素坐标的宽度进行一定计算来确定真实身份证号码所在的区域范围了。</p><p>接下来我们可以确定真实号码所在区域的结构体范围</p><ul><li>X：模板的左上角像素坐标x加上模板的宽</li><li>Y：模板的y</li><li>W：全图宽-(身份证(模版)X+身份证(模版)宽) - n(给个大概值)</li><li>H：模板的高</li></ul><p>&emsp;&emsp;有了以上参数我们就可以把号码所在的区域专门截取出来，是不是已经实现了最重要的功能了。</p><p>&emsp;&emsp;当然，拿到号码之后我们还需要对号码去进行识别，这里我们采用tesseract-ocr训练的模型来识别具体号码，关于tesseract-ocr的使用可以自行去谷歌。</p><p>&emsp;&emsp;这里还有许多需要优化的地方，身份证原图是彩色图片，考虑到OpenCV计算多通道图片需要耗费性能，在预处理阶段需要先转换为灰度图，之后还需要进行高斯边界模糊处理消除噪声的影响。</p><p>核心代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">#include &quot;common.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">#define DEFAULT_IDCARD_WIDTH  640</div><div class="line">#define DEFAULT_IDCARD_HEIGHT  320</div><div class="line"></div><div class="line">#define DEFAULT_IDNUMBER_WIDTH  240</div><div class="line">#define DEFAULT_IDNUMBER_HEIGHT  120</div><div class="line"></div><div class="line">#define  FIX_IDCARD_SIZE Size(DEFAULT_IDCARD_WIDTH,DEFAULT_IDCARD_HEIGHT)</div><div class="line">#define  FIX_IDNUMBER_SIZE  Size(DEFAULT_IDNUMBER_WIDTH,DEFAULT_IDNUMBER_HEIGHT)</div><div class="line"></div><div class="line">#define FIX_TEMPLATE_SIZE  Size(150, 26)</div><div class="line"></div><div class="line">extern &quot;C&quot;</div><div class="line">JNIEXPORT jobject JNICALL</div><div class="line">Java_com_samychen_gracefulwrapper_idcardrecognization_ImageUtils_findIdNumber(JNIEnv *env,</div><div class="line">                                                                              jclass type,</div><div class="line">                                                                              jobject src,</div><div class="line">                                                                              jobject out,</div><div class="line">                                                                              jobject tpl,</div><div class="line">                                                                              jobject config) &#123;</div><div class="line"></div><div class="line">    //原始图</div><div class="line">    Mat img_src;</div><div class="line">    //灰度图 需要拿去模版匹配</div><div class="line">    Mat img_gray;</div><div class="line">    //二值图 进行轮廓检测</div><div class="line">    Mat img_threshold;</div><div class="line">    //高斯图 进行边界模糊</div><div class="line">    Mat img_gaussian;</div><div class="line">    //边界图</div><div class="line">    Mat img_canny;</div><div class="line">    //模版</div><div class="line">    Mat img_tpl;</div><div class="line">    //获得的身份证图</div><div class="line">    Mat img_idCard;</div><div class="line">    //获得的身份证号码图</div><div class="line">    Mat img_idNumber;</div><div class="line">    bitmap2Mat(env, src, img_src);</div><div class="line">    bitmap2Mat(env, tpl, img_tpl);</div><div class="line">    //灰度化</div><div class="line">    cvtColor(img_src, img_gray, COLOR_BGRA2GRAY);</div><div class="line">    //二值化</div><div class="line">    threshold(img_gray, img_threshold, 100, 255, THRESH_BINARY);</div><div class="line">    GaussianBlur(img_threshold,img_gaussian,Size(3,3),0);</div><div class="line">    Canny(img_gaussian,img_canny,180,255);</div><div class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</div><div class="line">    vector&lt;Vec4i&gt; hierachy;//每个边界轮廓都由上下左右4个坐标组成，所以需要vector数据结构</div><div class="line">    //轮廓检测 只检测外轮廓 并压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，比如矩形就是存储四个点</div><div class="line">    //findContours(img_threshold, contours, hierachy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</div><div class="line">    findContours(img_canny, contours, hierachy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</div><div class="line">    int width = img_src.cols &gt;&gt; 1;//图片宽的一半</div><div class="line">    int height = img_src.rows &gt;&gt; 1;//图片高的一半</div><div class="line">    if (contours.empty()) &#123;</div><div class="line">        //可能整张图就是身份证</div><div class="line">        img_idCard = img_gray;</div><div class="line">    &#125; else &#123;</div><div class="line">        Rect roiArea;</div><div class="line">        vector&lt;Rect&gt; roiAreas;</div><div class="line">        Rect rectMin;</div><div class="line">        for (auto points : contours) &#123;</div><div class="line">            //根据4个顶点获得区域</div><div class="line">            Rect rect = boundingRect(points);</div><div class="line">            //身份证轮廓的宽必须大于图片宽的一半</div><div class="line">            //高必须大于图片高的一半</div><div class="line">            if (rect.width &gt;= width &amp;&amp; rect.height &gt;= height) &#123;</div><div class="line">                roiArea = rect;</div><div class="line">                roiAreas.push_back(rect);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (roiAreas.size()&gt;0)&#123;</div><div class="line">            rectMin = roiAreas.at(0);//找出满足条件的所有轮廓中最小的就是正好身份证的轮廓</div><div class="line">            for(int i=0;i&lt;roiAreas.size();i++)&#123;</div><div class="line">                Rect temp = roiAreas.at(i);</div><div class="line">                if (temp.area()&lt;rectMin.area())&#123;</div><div class="line">                    rectMin = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else&#123;</div><div class="line">            rectMin = Rect(0,0,img_gray.cols,img_gray.rows);</div><div class="line">        &#125;</div><div class="line">        img_idCard = img_gray(rectMin);</div><div class="line">        //roiarea有面积</div><div class="line">//        if (roiArea.area())</div><div class="line">//            img_idCard = img_gray(roiArea);</div><div class="line">    &#125;</div><div class="line">    resize(img_idCard, img_idCard, FIX_IDCARD_SIZE);//身份证大小640 x 400</div><div class="line">    resize(img_tpl, img_tpl, FIX_TEMPLATE_SIZE);</div><div class="line">    cvtColor(img_tpl, img_tpl, COLOR_BGRA2GRAY);//使用灰度图进行匹配，彩色图计算量太大</div><div class="line">    int cols = img_idCard.cols - img_tpl.cols + 1;</div><div class="line">    int rows = img_idCard.rows - img_tpl.rows + 1;</div><div class="line">    //创建输出图像，输出图像的宽度 = 被查找图像的宽度 - 模版图像的宽度 + 1</div><div class="line">    Mat match(rows, cols, CV_32F);</div><div class="line">    //Mat match;</div><div class="line">//        TM_SQDIFF 平方差匹配法</div><div class="line">//        TM_CCORR 相关匹配法</div><div class="line">//        TM_CCOEFF 相关系数匹配法</div><div class="line">//        TM_SQDIFF_NORMED</div><div class="line">//        TM_CCORR_NORMED</div><div class="line">//        TM_CCOEFF_NORMED</div><div class="line">    // 对于方法 SQDIFF 和 SQDIFF_NORMED, 越小的数值代表更高的匹配结果. 而对于其他方法, 数值越大匹配越好</div><div class="line">    matchTemplate(img_idCard, img_tpl, match, TM_CCORR_NORMED);</div><div class="line">    //归一化</div><div class="line">    normalize(match, match, 0, 1, NORM_MINMAX, -1);</div><div class="line">    Point maxLoc;</div><div class="line">    minMaxLoc(match, 0, 0, 0, &amp;maxLoc);</div><div class="line">    //计算 [身份证(模版):号码区域]</div><div class="line">    //号码区域:</div><div class="line">    //x: 身份证(模版)的X+宽</div><div class="line">    //y: 身份证(模版)Y</div><div class="line">    //w: 全图宽-(身份证(模版)X+身份证(模版)宽) - n(给个大概值)</div><div class="line">    //h: 身份证(模版)高</div><div class="line">    Rect rect(maxLoc.x + img_tpl.cols, maxLoc.y, img_idCard.cols - (maxLoc.x + img_tpl.cols) - 40,</div><div class="line">              img_tpl.rows);</div><div class="line">    //拿二值的号码</div><div class="line">    resize(img_threshold, img_threshold, FIX_IDCARD_SIZE);</div><div class="line">    img_idNumber = img_threshold(rect);</div><div class="line">    jobject obj=createBitmap(env,img_idNumber,config);</div><div class="line">//    resize(img_idNumber, img_idNumber, FIX_IDNUMBER_SIZE);</div><div class="line">//    mat2Bitmap(env, img_idNumber, out);</div><div class="line"></div><div class="line"></div><div class="line">    img_src.release();</div><div class="line">    img_gray.release();</div><div class="line">    img_threshold.release();</div><div class="line">    img_idCard.release();</div><div class="line">    img_idNumber.release();</div><div class="line">    img_tpl.release();</div><div class="line">    match.release();</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>演示结果：<br><img src="http://upload-images.jianshu.io/upload_images/4398977-f2370bb06d5b80f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="身份证原图.jpg"></p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-8801d35753e6a224.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="识别结果.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;前面介绍了好些OpenCV基本知识之后，现在我们小试牛刀，稍微写个身份证识别功能出来，这里我们就把工程移植到安卓平台，其实核心业务逻辑是完全一样的。&lt;br&gt;项目地址：&lt;a href=&quot;https://github.com/samychen/IDcar
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>霍夫变换</title>
    <link href="http://samychen.com/2018/02/21/%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2/"/>
    <id>http://samychen.com/2018/02/21/霍夫变换/</id>
    <published>2018-02-21T06:33:20.000Z</published>
    <updated>2018-02-24T06:34:07.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="霍夫变换——直线"><a href="#霍夫变换——直线" class="headerlink" title="霍夫变换——直线"></a>霍夫变换——直线</h2><p>&emsp;&emsp;Hough Line Transform用来做直线检测，前提是已经做了边缘检测。<br>&emsp;&emsp;霍夫变换是平面空间到极坐标空间的转换，具有以下特点：</p><ul><li>对于任意一条直线上的所有点来说，变换到极坐标中，根据theta值可以得到r值</li><li>属于同一条直线上的点在极坐标(r,theta)必然在一个点上有最强的信号出现，因此根据最强信号的极坐标反算到平面坐标中就可以得到直线上各个点的像素坐标，从而得到直线。</li></ul><p>相关API：</p><ul><li>标准的霍夫变换cv::HoughLines从平面坐标转换到霍夫空间，最终输出是(theta,r)，表示极坐标空间</li><li>霍夫变换直线概率cv::HoughLinesP最终输出是直线的两个点</li></ul><p>先进行边缘检测，在进行霍夫直线检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/linedec.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">Canny(src, gray, 150, 200);</div><div class="line">cvtColor(gray, dst, CV_GRAY2BGR);</div><div class="line">imshow(&quot;edge img&quot;, gray);</div><div class="line">vector&lt;Vec4f&gt; plines;</div><div class="line">HoughLinesP(gray, plines, 1, CV_PI / 180.0, 10, 0, 10);</div><div class="line">Scalar color = Scalar(0, 0, 255);</div><div class="line">for (size_t i = 0; i &lt; plines.size(); i++)</div><div class="line">&#123;</div><div class="line">Vec4f hlines = plines[i];</div><div class="line">line(dst, Point(hlines[0], hlines[1]), Point(hlines[2], hlines[3]), color, 3, LINE_AA);</div><div class="line">&#125;</div><div class="line">imshow(&quot;output img&quot;, dst);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>演示效果<br><img src="http://upload-images.jianshu.io/upload_images/4398977-3047b6b1499e4cfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="霍夫变换——圆检测"><a href="#霍夫变换——圆检测" class="headerlink" title="霍夫变换——圆检测"></a>霍夫变换——圆检测</h2><p>&emsp;&emsp;从平面坐标到极坐标转换三个参数C(x0,y0,r)其中x0与y0是圆心坐标<br>&emsp;&emsp;假设平面坐标的任意一个圆上的点，转换到极坐标中：C(x0,y0,r)处有最大值，霍夫变换正是利用这个原理实现圆的检测。</p><p>相关API：<br>cv::HoughCircles<br>&emsp;&emsp;因为霍夫圆检测对噪声比较敏感，所有先对图像做中值滤波。<br>&emsp;&emsp;基于效率考虑，opencv中实现的霍夫变换圆检测是基于图像梯度的实现，分为两步：</p><ol><li>检测边缘，发现可能的圆心</li><li>基于第一步的基础上从候选圆心开始计数最佳半径大小</li></ol><p>HoughCircles参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/circle.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;input img&quot;, src);</div><div class="line">//中值滤波</div><div class="line">Mat output;</div><div class="line">medianBlur(src, output, 3);</div><div class="line">cvtColor(output, output, CV_BGR2GRAY);</div><div class="line">//霍夫圆检测</div><div class="line">vector&lt;Vec3f&gt; pcircles;</div><div class="line">HoughCircles(output, pcircles, CV_HOUGH_GRADIENT, 1, 10, 100, 30, 5, 50);</div><div class="line">src.copyTo(dst);</div><div class="line">for (size_t i = 0; i &lt; pcircles.size(); i++)</div><div class="line">&#123;</div><div class="line">Vec3f cc = pcircles[i];</div><div class="line">circle(dst, Point(cc[0], cc[1]), cc[2], Scalar(0, 0, 255), 2, LINE_AA);</div><div class="line">circle(dst, Point(cc[0], cc[1]), 2, Scalar(0, 255, 0), 2, LINE_AA);</div><div class="line">&#125;</div><div class="line">imshow(&quot;output img&quot;, dst);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>演示效果<br><img src="http://upload-images.jianshu.io/upload_images/4398977-e145efe71b57b399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>cc[0]cc[1]代表圆心的x和y的像素值，cc[2]代表半径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;霍夫变换——直线&quot;&gt;&lt;a href=&quot;#霍夫变换——直线&quot; class=&quot;headerlink&quot; title=&quot;霍夫变换——直线&quot;&gt;&lt;/a&gt;霍夫变换——直线&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Hough Line Transform用来做直线检测，前提是已经做
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>轮廓发现</title>
    <link href="http://samychen.com/2018/02/20/%E8%BD%AE%E5%BB%93%E5%8F%91%E7%8E%B0/"/>
    <id>http://samychen.com/2018/02/20/轮廓发现/</id>
    <published>2018-02-20T06:34:37.000Z</published>
    <updated>2018-02-24T06:35:33.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="轮廓发现"><a href="#轮廓发现" class="headerlink" title="轮廓发现"></a>轮廓发现</h2><p>&emsp;&emsp;轮廓发现是基于图像边缘提取的基础寻找对象轮廓的方法，所以边缘提取的阈值选定会影响最终轮廓发现结果。<br>相关API：<br><code>findContours发现轮廓</code><br><code>drawContours绘制轮廓</code></p><p>操作步骤:</p><ul><li>输入图像转为灰度图像</li><li>使用Canny进行边缘提取，得到二值图像</li><li>使用findContours寻找轮廓</li><li>使用drawContours绘制轮廓<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line">void contours(int, void *);</div><div class="line">int thread_value = 100;</div><div class="line">int thread_max = 255;</div><div class="line">RNG rng;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/circle.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line"></div><div class="line">cvtColor(src, src, CV_BGR2GRAY);</div><div class="line">imshow(&quot;input img&quot;, src);</div><div class="line">const char* title = &quot;thread value&quot;;</div><div class="line">createTrackbar(title, &quot;output img&quot;, &amp;thread_value, thread_max, contours);</div><div class="line">contours(0, 0);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">void contours(int, void *)</div><div class="line">&#123;</div><div class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</div><div class="line">vector&lt;Vec4i&gt; hierarchy;</div><div class="line">Canny(src, dst, thread_value, thread_value * 2, 3, false);</div><div class="line">findContours(dst, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));</div><div class="line">Mat drawImg = Mat::zeros(dst.size(), CV_8UC3);</div><div class="line">for (size_t i = 0; i &lt; contours.size(); i++)</div><div class="line">&#123;</div><div class="line">Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));</div><div class="line">drawContours(drawImg, contours, i, color, 2, LINE_8, hierarchy, 0, Point(0, 0));</div><div class="line">&#125;</div><div class="line">imshow(&quot;output img&quot;, drawImg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4398977-959dae316bdf9c6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阈值100.png"><br><img src="http://upload-images.jianshu.io/upload_images/4398977-60f32f372de501c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阈值204.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;轮廓发现&quot;&gt;&lt;a href=&quot;#轮廓发现&quot; class=&quot;headerlink&quot; title=&quot;轮廓发现&quot;&gt;&lt;/a&gt;轮廓发现&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;轮廓发现是基于图像边缘提取的基础寻找对象轮廓的方法，所以边缘提取的阈值选定会影响最终轮廓发现结果。&lt;
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>边缘处理</title>
    <link href="http://samychen.com/2018/02/09/%E8%BE%B9%E7%BC%98%E5%A4%84%E7%90%86/"/>
    <id>http://samychen.com/2018/02/09/边缘处理/</id>
    <published>2018-02-09T06:18:57.000Z</published>
    <updated>2018-02-24T06:23:49.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="卷积边界问题"><a href="#卷积边界问题" class="headerlink" title="卷积边界问题"></a>卷积边界问题</h4><p>图像卷积时边界像素不能被卷积计算进去，因为边界处像素没有完全跟kernel重叠，当ksize等于3时，边缘有1个像素没有被处理，当ksize等于5时，边缘有2个没有被处理。</p><h4 id="处理边缘"><a href="#处理边缘" class="headerlink" title="处理边缘"></a>处理边缘</h4><p>&emsp;&emsp;在卷积开始前增加边缘像素，填充的像素为白色或黑色，这样确保图像的边缘被处理，在卷积计算之后去掉这些边缘，opencv默认处理的方法是<code>copyMakeBorder(src, dst, top, bottom, left, right, borderType, color)</code><br>&emsp;&emsp;其中默认的borderType是BORDER_DEFAULT，另外还有BORDER_WRAP，BORDER_CONSTANT，BORDER_REPLICATE三种类型</p><ul><li>BORDER_WRAP 用另外一边边缘像素来填充</li><li>BORDER_CONSTANT 用指定像素填充</li><li>BORDER_REPLICATE 用已知的边缘像素值填充</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4398977-c1fac43e1dcbc20f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BORDER_REPLICATE .png"><br><img src="http://upload-images.jianshu.io/upload_images/4398977-5c1ae449651f8d01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BORDER_WRAP .png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/cat.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;input img&quot;, src);</div><div class="line">int top = (int)(0.05*src.rows);</div><div class="line">int bottom = (int)(0.05*src.rows);</div><div class="line">int left = (int)(0.05*src.cols);</div><div class="line">int right = (int)(0.05*src.cols);</div><div class="line">RNG rng(12345);</div><div class="line">int borderType = BORDER_DEFAULT;</div><div class="line">int c = 0;</div><div class="line">while (true) &#123;</div><div class="line">c = waitKey(500);</div><div class="line">//ESC</div><div class="line">if ((char)c == 27) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">if ((char)c == &apos;r&apos;) &#123;</div><div class="line">borderType = BORDER_REPLICATE;</div><div class="line">&#125;</div><div class="line">if ((char)c == &apos;c&apos;) &#123;</div><div class="line">borderType = BORDER_CONSTANT;</div><div class="line">&#125;</div><div class="line">if ((char)c == &apos;w&apos;) &#123;</div><div class="line">borderType = BORDER_WRAP;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">borderType = BORDER_DEFAULT;</div><div class="line">&#125;</div><div class="line">Scalar color = Scalar(rng.uniform(0, 255), rng.uniform(0, 255), rng.uniform(0, 255));</div><div class="line">copyMakeBorder(src, dst, top, bottom, left, right, borderType, color);</div><div class="line">imshow(&quot;final result&quot;, dst);</div><div class="line">&#125;</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h4><p>Canny算法是很好的边缘检测算法，算法分5步</p><ul><li>高斯模糊</li><li>灰度转换</li><li>梯度计算</li><li>非最大信号抑制</li><li>高低阈值输出二值图像<br><code>Canny(src, edge_output, low_threshold, h_threshold , ksize, L2gradient)</code><h4 id="高低阈值输出二值图像"><a href="#高低阈值输出二值图像" class="headerlink" title="高低阈值输出二值图像"></a>高低阈值输出二值图像</h4></li></ul><p>高低阈值分别为T2，T1，凡是高于T2的保留，低于T1的舍弃，从逃狱T2的出发，凡是大于T1而且直接连接的都保留，最后得到二值图像。<br>推荐T1和T2的关系是T2：T1 = 2:1或3:1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst, gray;</div><div class="line">int g_value = 60;</div><div class="line">int maxvalue = 255;</div><div class="line">void cannry_callback(int, void *);</div><div class="line"></div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/cat.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;input img&quot;, src);</div><div class="line">cvtColor(src, gray, CV_BGR2GRAY);</div><div class="line">createTrackbar(&quot;threshold value:&quot;, &quot;output img&quot;, &amp;g_value, maxvalue, cannry_callback);</div><div class="line">cannry_callback(0, 0);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">void cannry_callback(int, void *) &#123;</div><div class="line">Mat edge_output;</div><div class="line">blur(gray, gray, Size(3, 3), Point(-1, -1), BORDER_DEFAULT);</div><div class="line">Canny(gray, edge_output, g_value, g_value * 2, 3, false);</div><div class="line">imshow(&quot;output img&quot;, ~edge_output);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果演示<br><img src="http://upload-images.jianshu.io/upload_images/4398977-404671bda2f9a019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;卷积边界问题&quot;&gt;&lt;a href=&quot;#卷积边界问题&quot; class=&quot;headerlink&quot; title=&quot;卷积边界问题&quot;&gt;&lt;/a&gt;卷积边界问题&lt;/h4&gt;&lt;p&gt;图像卷积时边界像素不能被卷积计算进去，因为边界处像素没有完全跟kernel重叠，当ksize等于3时，边缘有
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>图像金字塔——降采样与上采样</title>
    <link href="http://samychen.com/2018/02/07/%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94%E2%80%94%E2%80%94%E9%99%8D%E9%87%87%E6%A0%B7%E4%B8%8E%E4%B8%8A%E9%87%87%E6%A0%B7/"/>
    <id>http://samychen.com/2018/02/07/图像金字塔——降采样与上采样/</id>
    <published>2018-02-07T06:18:13.000Z</published>
    <updated>2018-02-24T06:23:43.356Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4398977-5a5b19bdf7bf168c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>往下和往上，图像的宽高是原来的一倍和一半</p><h4 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h4><p>&emsp;&emsp;我们在图像处理中常常会调整图像大小，最常见的就是放大和缩小操作。一个图像金字塔是一系列图像的组合，最底下图像尺寸最大，最顶端图像尺寸最小，从空间上往下看就像一个金字塔。<br>&emsp;&emsp;图像处理当中最常见的就是利用图像金字塔产生一系列不同分辨率图像，然后在不同尺度空间去寻找图像对应的特征，因为我们输入的图像我们不知道是什么样子，而图像金字塔可以保证图像特征存在。</p><h4 id="常见opencv金字塔"><a href="#常见opencv金字塔" class="headerlink" title="常见opencv金字塔"></a>常见opencv金字塔</h4><ul><li>高斯金字塔——用来对图像进行降采样</li><li>拉普拉斯金字塔——用来重建一张图片，根据他的上层图像降采样图片</li></ul><h4 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h4><p>&emsp;&emsp;从底像上，逐层降采样得到。必须是逐层采用，不能隔层采用1/4。<br>降采样之后图像大小是原来的1/2 x 1/2，就是对原图像删除偶数行与列。</p><p>高斯金字塔生成过程分为两步：</p><ol><li>对当前层进行高斯模糊</li><li>删除当前层的行与列</li></ol><h4 id="高斯不同DOG"><a href="#高斯不同DOG" class="headerlink" title="高斯不同DOG"></a>高斯不同DOG</h4><p>&emsp;&emsp;就是把一张图像在不同参数下做高斯模糊之后的结果相减，得到输出图像。<br>&emsp;&emsp;高斯不同是图像的内在特征，在灰度图像增强，角点检测中经常用到。</p><ul><li>上采样 <code>pyrUp(Mat src,Mat dst,Size(src.cols*2,src.rows*2))</code></li><li>降采样 <code>pyrDown(Mat src,Mat dst,Size(src.cols/2,src.rows/2))</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/cat.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">namedWindow(&quot;output img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;input img&quot;, src);</div><div class="line">//上采样</div><div class="line">pyrUp(src, dst, Size(src.cols * 2, src.rows * 2));</div><div class="line">imshow(&quot;上采样&quot;, dst);</div><div class="line">//降采样</div><div class="line">Mat dst_;</div><div class="line">pyrDown(src, dst_, Size(src.cols / 2, src.rows / 2));</div><div class="line">imshow(&quot;降采样&quot;, dst_);</div><div class="line">//DOG</div><div class="line">Mat gray_src, g1, g2, catImg;</div><div class="line">cvtColor(src, gray_src, CV_BGR2GRAY);</div><div class="line">GaussianBlur(gray_src, g1, Size(3, 3), 0, 0);</div><div class="line">GaussianBlur(g1, g2, Size(3, 3), 0, 0);</div><div class="line">subtract(g1, g2, catImg, Mat());</div><div class="line">normalize(catImg, catImg, 255, 0, NORM_MINMAX);</div><div class="line">imshow(&quot;DOG&quot;, catImg);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>输出结果演示<br><img src="http://upload-images.jianshu.io/upload_images/4398977-49b4a74b81ae066b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>从上面可以看到上采样和降采样分别提高和降低了图像的分辨率，高斯不同处理结果显示了图像的内在特征。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4398977-5a5b19bdf7bf168c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>形态学操作</title>
    <link href="http://samychen.com/2018/02/07/%E5%BD%A2%E6%80%81%E5%AD%A6%E6%93%8D%E4%BD%9C/"/>
    <id>http://samychen.com/2018/02/07/形态学操作/</id>
    <published>2018-02-07T06:17:57.000Z</published>
    <updated>2018-02-24T06:23:37.426Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;图像形态学操作是基于形状的一系列图像处理操作的合集，主要是基于集合论基础上的形态学数学。主要有四个操作：膨胀，腐蚀，开，闭。</p><h4 id="形态学操作——膨胀"><a href="#形态学操作——膨胀" class="headerlink" title="形态学操作——膨胀"></a>形态学操作——膨胀</h4><p>&emsp;&emsp;膨胀与腐蚀跟卷积操作类似，假设有图像A和结构元素B，B在A上面移动，其中B定义其中心是锚点，计算B覆盖下的A的最大像素值用来替代锚点的像素，其中B作为结构元素可以是任意形状。</p><h4 id="形态学操作——腐蚀"><a href="#形态学操作——腐蚀" class="headerlink" title="形态学操作——腐蚀"></a>形态学操作——腐蚀</h4><p>&emsp;&emsp;腐蚀过程和膨胀过程类似，唯一不同的是以最小像素值替代锚点像素。<br><img src="http://upload-images.jianshu.io/upload_images/4398977-7aa69130561e7542.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="膨胀与腐蚀.png"></p><ul><li>获取结构元素 <code>getStructuringElement(int shape,Size ksize,Point anchor)</code> 其中形状shape可以是MORPH_RECT,MORPH_CROSS,MORPH_ELLIPSE，锚点默认是Point(-1,-1)，意思是中心元素。</li><li>膨胀 <code>dilate(src,dst,kernel)</code></li><li>腐蚀 <code>erode(src,dst,kernel)</code><br><img src="http://upload-images.jianshu.io/upload_images/4398977-8a9d2f32378cad1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>&emsp;&emsp;opencv提供了状态条TrackBar来动态调整结构元素大小。<br>createTrackBar(const String&amp; trackbarname,const String windowname,int <em> value,int count,Trackbarcallback func,void </em> userdata=0) 回调函数如果为NULL，就只会update，不会调用callback函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">int elementsize = 3;</div><div class="line">int maxsize = 21;</div><div class="line">Mat src, dst, dst_;</div><div class="line">void callback(int, void *);</div><div class="line"></div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">int ksize = 0;</div><div class="line">src = imread(&quot;F:/cat.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;show img&quot;, src);</div><div class="line">char TrackbarName[50];</div><div class="line">sprintf_s(TrackbarName, &quot;Alpha x %d&quot;, elementsize);</div><div class="line">namedWindow(&quot;output result&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">createTrackbar(TrackbarName, &quot;output result&quot;, &amp;elementsize, maxsize, callback);</div><div class="line">callback(0, 0);</div><div class="line">//Mat kernel = getStructuringElement(MORPH_RECT, Size(5, 5), Point(-1, -1));</div><div class="line">//dilate(src, dst, kernel);</div><div class="line">//erode(src, dst_, kernel);</div><div class="line">//namedWindow(&quot;dilate result&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">//namedWindow(&quot;erode result&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">//imshow(&quot;dilate&quot;, dst);</div><div class="line">//imshow(&quot;erode&quot;, dst_);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void callback(int, void *)</div><div class="line">&#123;</div><div class="line">int s = elementsize * 2 + 1;</div><div class="line">Mat sturctEle = getStructuringElement(MORPH_RECT, Size(s, s), Point(-1, -1));</div><div class="line">dilate(src, dst, sturctEle);</div><div class="line">//erode(src, dst_, sturctEle);</div><div class="line">imshow(&quot;dilate&quot;, dst);</div><div class="line">//imshow(&quot;erode&quot;, dst_);</div><div class="line">return;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果演示<br><img src="http://upload-images.jianshu.io/upload_images/4398977-474ad50164475ec3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="形态学操作——开操作"><a href="#形态学操作——开操作" class="headerlink" title="形态学操作——开操作"></a>形态学操作——开操作</h4><p>&emsp;&emsp;先腐蚀后膨胀，可以去掉小的对象<br><img src="http://upload-images.jianshu.io/upload_images/4398977-0b01f36f97a810ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="形态学操作——闭操作"><a href="#形态学操作——闭操作" class="headerlink" title="形态学操作——闭操作"></a>形态学操作——闭操作</h4><p>&emsp;&emsp;先膨胀后腐蚀，可以填充小对象<br><img src="http://upload-images.jianshu.io/upload_images/4398977-0744fa33888a4948.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="形态学梯度"><a href="#形态学梯度" class="headerlink" title="形态学梯度"></a>形态学梯度</h4><p>&emsp;&emsp;膨胀减去腐蚀<br><img src="http://upload-images.jianshu.io/upload_images/4398977-75b873b27d371ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="形态学操作——顶帽"><a href="#形态学操作——顶帽" class="headerlink" title="形态学操作——顶帽"></a>形态学操作——顶帽</h4><p>&emsp;&emsp;顶帽是原图像与开操作图像之间的差值图像<br><img src="http://upload-images.jianshu.io/upload_images/4398977-f00d9cf541840c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="形态学操作——黑帽"><a href="#形态学操作——黑帽" class="headerlink" title="形态学操作——黑帽"></a>形态学操作——黑帽</h4><p>&emsp;&emsp;黑帽是闭操作图像与原图像之间的差值图像<br><img src="http://upload-images.jianshu.io/upload_images/4398977-8a3b4195fcd51dfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/black_hole.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;show img&quot;, src);</div><div class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(15, 15), Point(-1, -1));</div><div class="line">//morphologyEx(src, dst, CV_MOP_OPEN, kernel);</div><div class="line">//morphologyEx(src, dst, CV_MOP_CLOSE, kernel);</div><div class="line">//morphologyEx(src, dst, CV_MOP_GRADIENT, kernel);</div><div class="line">//morphologyEx(src, dst, CV_MOP_TOPHAT, kernel);</div><div class="line">morphologyEx(src, dst, CV_MOP_BLACKHAT, kernel);</div><div class="line"></div><div class="line">namedWindow(&quot;output result&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;erode&quot;, dst);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>morphologyEx(Mat src,Mat dst,int opt,kernel)<br>其中opt是形态学操作，可以为CV_MOP_OPEN,CV_MOP_CLOSE,CV_MOP_GRADIENT,CV_MOP_TOPHAT,CV_MOP_BLACKHAT</p><h3 id="形态学应用"><a href="#形态学应用" class="headerlink" title="形态学应用"></a>形态学应用</h3><h4 id="提取水平和垂直线"><a href="#提取水平和垂直线" class="headerlink" title="提取水平和垂直线"></a>提取水平和垂直线</h4><p>&emsp;&emsp;可以通过自定义结构元素实现结构元素对输入图像一些对象敏感，一些对象不敏感，这样就会让敏感对象改变而不敏感对象保留输出。通过使用膨胀与腐蚀，使用不同的结构元素来得到不同的结果。</p><p>操作步骤：</p><ul><li>输入图像转换为灰度图像</li><li>灰度图像转换为二值图像</li><li>定义结构元素</li><li>开操作提取水平与垂直线<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/line.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">Mat gray;</div><div class="line">cvtColor(src, gray, CV_BGR2GRAY);</div><div class="line">imshow(&quot;gray img&quot;, gray);</div><div class="line">Mat binImg;</div><div class="line">adaptiveThreshold(~gray, binImg, 255, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, 15, -2);</div><div class="line">imshow(&quot;binary img&quot;, binImg);</div><div class="line"></div><div class="line">Mat hline = getStructuringElement(MORPH_RECT, Size(src.cols/16, 1), Point(-1, -1));</div><div class="line">Mat vline = getStructuringElement(MORPH_RECT, Size(1, src.rows/16), Point(-1, -1));</div><div class="line">Mat temp;</div><div class="line">//erode(binImg, temp, hline);</div><div class="line">//dilate(temp, dst, hline);</div><div class="line">erode(binImg, temp, vline);</div><div class="line">dilate(temp, dst, vline);</div><div class="line">bitwise_not(dst, dst);</div><div class="line">imshow(&quot;final result&quot;, dst);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4398977-4c4afd0990074f98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="水平线.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-a402aa3d6abcbd6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="垂直线.png"></p><p>扩展：去除打码平台无用的线条</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-750f5d6097a5b58f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace cv;</div><div class="line">Mat src, dst;</div><div class="line">int main(int argc, int ** argv)</div><div class="line">&#123;</div><div class="line">src = imread(&quot;F:/number.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">Mat gray;</div><div class="line">cvtColor(src, gray, CV_BGR2GRAY);</div><div class="line">imshow(&quot;gray img&quot;, gray);</div><div class="line">Mat binImg;</div><div class="line">adaptiveThreshold(~gray, binImg, 255, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, 15, -2);</div><div class="line">imshow(&quot;binary img&quot;, binImg);</div><div class="line">Mat hline = getStructuringElement(MORPH_RECT, Size(src.cols/16, 1), Point(-1, -1));</div><div class="line">Mat vline = getStructuringElement(MORPH_RECT, Size(1, src.rows/16), Point(-1, -1));</div><div class="line">Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3), Point(-1, -1));</div><div class="line">Mat temp;</div><div class="line"></div><div class="line">erode(binImg, temp, kernel);</div><div class="line">dilate(temp, dst, kernel);</div><div class="line">bitwise_not(dst, dst);</div><div class="line">imshow(&quot;final result&quot;, dst);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;图像形态学操作是基于形状的一系列图像处理操作的合集，主要是基于集合论基础上的形态学数学。主要有四个操作：膨胀，腐蚀，开，闭。&lt;/p&gt;
&lt;h4 id=&quot;形态学操作——膨胀&quot;&gt;&lt;a href=&quot;#形态学操作——膨胀&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>模糊图像——线性滤波</title>
    <link href="http://samychen.com/2018/02/04/%E6%A8%A1%E7%B3%8A%E5%9B%BE%E5%83%8F%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E6%BB%A4%E6%B3%A2/"/>
    <id>http://samychen.com/2018/02/04/模糊图像——线性滤波/</id>
    <published>2018-02-04T06:17:39.000Z</published>
    <updated>2018-02-24T06:23:24.508Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;模糊图像是opencv常见的操作，使用模糊操作的原因是为了给图像预处理时降低噪声影响，Smooth和Blur是opencv图像模糊的API，其背后的原理其实是数学的卷积操作，而卷积算子计算通常是线性计算，所以也可以称为线性滤波。</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-ca27910845d5e18d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="卷积.png"></p><p>&emsp;&emsp;卷积是图像处理的一个操作，是kernel在图像上的每个像素上的操作。kernel本质是一个固定大小的矩阵数组，中心点称为锚点（anchor point）。<br>&emsp;&emsp;把kernel放到像素数组上，求锚点周围覆盖的像素乘积之和（包括锚点），用来替换锚点覆盖下像素点值称为卷积处理。</p><p>&emsp;&emsp;上面的卷积过程是一个3x3的窗口从左到右，从上到下平移过程。黄色的每个像素点之和取平均值赋值给中心的红色点作为卷积处理后的像素值。这是一种均值滤波。<br>opencv提供了均值滤波（模糊）的API <code>blur(Mat src,Mat dst,Size(xradius,yradius),Point(-1,-1))</code><br>&emsp;&emsp;当然还有其他模糊的方式，如高斯模糊 <code>GaussianBlur(Mat src,Mat dst,Size(x,y),sigmax,sigmay)</code> 其中Size(x,y)的x和y必须为正基数，且一般x=y</p><p>&emsp;&emsp;不同卷积算子可以看做不同的滤波结果：<br><img src="http://upload-images.jianshu.io/upload_images/4398977-ea34e661d7992c05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="卷积.png"></p><h4 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h4><p>中值滤波的应用medianBlur(Mat src,Mat dst,ksize)</p><ul><li>统计排序滤波器</li><li>中值滤波对椒盐噪声有很好的抑制作用</li></ul><p>&emsp;&emsp;椒盐噪声一般是作为最值对信号产生影响，中值滤波对最值有很好的抑制作用。<br>那么是否均值滤波能做为生产环境的滤波处理，均值滤波有什么缺陷呢？</p><p>均值模糊无法克服边缘信息丢失缺陷，因为均值滤波是基于平均权重处理。而高斯模糊部分克服了改缺陷，但是无法完全避免，因为高斯模糊没有考虑像素值不同的影响。</p><h4 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h4><p>&emsp;&emsp;双边滤波也可以称为高斯双边模糊，是边缘保留的滤波方法，避免了边缘信息的丢失，保留了图像轮廓不变。</p><p>&emsp;&emsp;考虑像素值的处理，如果有1和255两个像素值，那么在各自的像素值处离的比较远，可以不做处理</p><p>bilateralFilter(Mat src,Mat dst,d=15,150,3) </p><ul><li>15表示计算的半径，半径之内像素全部纳入计算，如果是-1，那么根据sigma space参数取值</li><li>150 sigma color 决定多少差值之内的像素会被计算</li><li>3 sigma space 如果d的值大于0则声明无效，否则根据它来计算d值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">using namespace cv;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">Mat src, dst;</div><div class="line">src = imread(&quot;F:/cat.jpg&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return - 1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;show img&quot;, src);</div><div class="line">dst = Mat::zeros(src.size(),src.type());</div><div class="line">//medianBlur(src, dst, 3);</div><div class="line">bilateralFilter(src, dst, 15, 100, 5);</div><div class="line">namedWindow(&quot;bilateralFilter&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;bilateralFilter result&quot;, dst);</div><div class="line"></div><div class="line">//Mat bgblur(src.size(), src.type());</div><div class="line">//GaussianBlur(src, bgblur, Size(15, 15), 3, 3);</div><div class="line">//imshow(&quot;GaussianBlur result&quot;, bgblur);</div><div class="line">//可以在双边滤波后做对比度增强</div><div class="line">Mat resultImg(src.size(), src.type());</div><div class="line">Mat kernel = (Mat_&lt;int&gt;(3, 3) &lt;&lt; 0, -1, 0, -1, 5, -1, 0, -1, 0);</div><div class="line">filter2D(src, resultImg, -1, kernel, Point(-1, -1), 0);</div><div class="line">imshow(&quot;result&quot;, resultImg);</div><div class="line">waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果演示<br><img src="http://upload-images.jianshu.io/upload_images/4398977-7850d49ec36abfe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="自定义线性滤波"><a href="#自定义线性滤波" class="headerlink" title="自定义线性滤波"></a>自定义线性滤波</h4><p>&emsp;&emsp;线性滤波常用的算子有Sobel算子，Laplance算子，当然我们可以自己定义算子然后通过opencv提供的filter2D来实现自己的滤波器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">using namespace cv;</div><div class="line">int main(int argc,int ** argv)</div><div class="line">&#123;</div><div class="line">Mat src, dst;</div><div class="line">int ksize = 0;</div><div class="line">src = imread(&quot;F:/cat.png&quot;);</div><div class="line">if (!src.data) &#123;</div><div class="line">printf(&quot;无法加载图片\n&quot;);</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">namedWindow(&quot;input img&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;show img&quot;, src);</div><div class="line">dst = Mat::zeros(src.size(), src.type());</div><div class="line">namedWindow(&quot;bilateralFilter&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">//Robert X方向</div><div class="line">//Mat kernelx = (Mat_&lt;int&gt;(2, 2) &lt;&lt; 1, 0, 0, -1);</div><div class="line">//filter2D(src, dst, -1, kernelx, Point(-1, -1), 0.0);</div><div class="line">//Robert Y方向</div><div class="line">//Mat result = Mat::zeros(src.size(), src.type());</div><div class="line">//Mat kernely = (Mat_&lt;int&gt;(2, 2) &lt;&lt; 0, 1, -1, 0);</div><div class="line">//filter2D(src, result, -1, kernely, Point(-1, -1), 0.0);</div><div class="line"></div><div class="line">//Sobel X方向</div><div class="line">Mat kernelx = (Mat_&lt;int&gt;(3, 3) &lt;&lt; -1, 0, 1, -2, 0, 2, -1, 0, 1);</div><div class="line">filter2D(src, dst, -1, kernelx, Point(-1, -1), 0.0);</div><div class="line">//Sobel Y方向</div><div class="line">Mat result = Mat::zeros(src.size(), src.type());</div><div class="line">Mat kernely = (Mat_&lt;int&gt;(3, 3) &lt;&lt; -1, -2, -1, 0, 0, 0, 1, 2, 1);</div><div class="line">filter2D(src, result, -1, kernely, Point(-1, -1), 0.0);</div><div class="line">//拉普拉斯算子</div><div class="line">Mat result_ = Mat::zeros(src.size(), src.type());</div><div class="line">Mat kernel_ = (Mat_&lt;int&gt;(3, 3) &lt;&lt; 0, -1, 0, -1, 4, -1, 0, -1, 0);</div><div class="line">filter2D(src, result_, -1, kernel_, Point(-1, -1), 0.0);</div><div class="line">imshow(&quot;Sobel X result&quot;, dst);</div><div class="line">imshow(&quot;Sobel Y result&quot;, result);</div><div class="line">imshow(&quot;laplance result&quot;, result_);</div><div class="line">waitKey(0);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果演示<br><img src="http://upload-images.jianshu.io/upload_images/4398977-3fdac31efef3a3ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>可以看出，针对不同卷积算子，得到不同的结果，其中沿X方向的算子和沿Y方向的算子得到的结果都只有部分原图像的特征，使用高斯算子得到的特征比较符合原图像的要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;模糊图像是opencv常见的操作，使用模糊操作的原因是为了给图像预处理时降低噪声影响，Smooth和Blur是opencv图像模糊的API，其背后的原理其实是数学的卷积操作，而卷积算子计算通常是线性计算，所以也可以称为线性滤波。&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>Mat基本操作</title>
    <link href="http://samychen.com/2018/02/01/Mat%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://samychen.com/2018/02/01/Mat基本操作/</id>
    <published>2018-02-01T06:17:12.000Z</published>
    <updated>2018-02-24T06:22:54.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="矩阵基本操作"><a href="#矩阵基本操作" class="headerlink" title="矩阵基本操作"></a>矩阵基本操作</h4><p>opencv最基本的结构体是Mat，opencv提供了一系列Mat基本操作<br>加载图片cv::imgread<br>修改图片(色彩变化)cv::cvtColor 第三个参数表示从源色彩空间转换到目的色彩空间<br>保存图片cv::imgwrite<br>显示图像cv::namedWindows cv::imshow<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">using namespace cv;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">Mat src = imread(&quot;F:/build_android.png&quot;,IMREAD_GRAYSCALE);</div><div class="line">Mat output_img = Mat::zeros(src.size(),src.type());</div><div class="line">namedWindow(&quot;test opencv&quot;, CV_WINDOW_AUTOSIZE);//CV_WINDOW_AUTOSIZE不允许任务修改窗口大小</div><div class="line">imshow(&quot;show img&quot;, src);</div><div class="line"></div><div class="line">namedWindow(&quot;test opencv2&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line"></div><div class="line">cvtColor(src, output_img, COLOR_BGR2HLS);</div><div class="line">imshow(&quot;show img2&quot;, output_img);</div><div class="line"></div><div class="line">int cols = src.cols*src.channels();//图像宽度等于图像的cols乘以图像的通道数</div><div class="line">int rows = src.rows;//图像高度等于图像的rows</div><div class="line">for (int row = 1; row &lt; rows-1; row++) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//imwrite(&quot;F:/hlstest.png&quot;,output_img);</div><div class="line">waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="获取图像像素指针"><a href="#获取图像像素指针" class="headerlink" title="获取图像像素指针"></a>获取图像像素指针</h4><p>CV_Assert(myImage.depth()==CV_8U)<br>Mat.ptr<uchar>(int i=0)获取像素矩阵的指针，索引i表示第几行，从0开始计数<br>获取当前行指针const uchar* current = myImage.ptr<uchar>(row);<br>获取当前像素点P(row,col)的像素值p(row,col) = current[col]</uchar></uchar></p><h4 id="像素范围处理saturate-cast"><a href="#像素范围处理saturate-cast" class="headerlink" title="像素范围处理saturate_cast"></a>像素范围处理saturate_cast<uchar></uchar></h4><p>saturate_cast<uchar>(-100)，返回0<br>saturate_cast<uchar>(2888)，返回255<br>小于0返回0，大于255返回255 这个函数确保像素值在0到255之间</uchar></uchar></p><h4 id="矩阵掩膜操作-对比度提高，立体感增强"><a href="#矩阵掩膜操作-对比度提高，立体感增强" class="headerlink" title="矩阵掩膜操作(对比度提高，立体感增强)"></a>矩阵掩膜操作(对比度提高，立体感增强)</h4><p>数字图像处理中,掩模为二维矩阵数组,有时也用多值图像。数字图像处理中,图像掩模主要用于：</p><ul><li>提取感兴趣区,用预先制作的感兴趣区掩模与待处理图像相乘,得到感兴趣区图像,感兴趣区内图像值保持不变,而区外图像值都为0。</li><li>屏蔽作用,用掩模对图像上某些区域作屏蔽,使其不参加处理或不参加处理参数的计算,或仅对屏蔽区作处理或统计。</li><li>结构特征提取,用相似性变量或图像匹配方法检测和提取图像中与掩模相似的结构特征。</li><li>特殊形状图像的制作。</li></ul><p>掩膜操作实现图像对比度调整，根据掩膜来重新计算每个像素的像素值，掩膜(mask)也被称为 kernel。<br>通过掩膜操作实现图像对比度提高。<br><img src="http://upload-images.jianshu.io/upload_images/4398977-222e88ac7a2228da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mask.png"></p><p>上面矩阵像素操作可以用下面公式来表示<br><code>I(i,j) = 5*I(i,j) - [I(i-1,j) + I(i+1,j) + I(i,j-1) + I(i,j+1)]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2/opencv.hpp&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line"></div><div class="line">using namespace cv;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    Mat src, dst;</div><div class="line">    //加载图像</div><div class="line">    src = imread(&quot;F:/build_android.jpg&quot;);</div><div class="line">    </div><div class="line">    if (!src.data) &#123;</div><div class="line">        printf(&quot;could not load image\n&quot;);</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">    //显示</div><div class="line">    namedWindow(&quot;input Image&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">    imshow(&quot;input Image&quot;, src);</div><div class="line"></div><div class="line">     //掩膜操作</div><div class="line">     int cols = (src.cols-1) * src.channels();//图像宽度等于图像的cols乘以图像的通道数</div><div class="line">     int offsetx = src.channels();</div><div class="line">     int rows = src.rows;//图像高度等于图像的rows</div><div class="line">     dst = Mat::zeros(src.size(), src.type());</div><div class="line"></div><div class="line">     for (int row = 1; row &lt; rows-1; row++) &#123;</div><div class="line">       const uchar *previous = src.ptr&lt;uchar&gt;(row-1);</div><div class="line">       const uchar *current = src.ptr&lt;uchar&gt;(row);</div><div class="line">       const uchar *next = src.ptr&lt;uchar&gt;(row+1);</div><div class="line">       uchar *output = dst.ptr&lt;uchar&gt;(row);</div><div class="line">       for (int col = offsetx; col &lt; cols; col++) &#123;</div><div class="line">         output[col] = saturate_cast&lt;uchar&gt;(5*current[col] - (current[col-offsetx] + current[col+offsetx] + previous[col] + next[col]));</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    //显示</div><div class="line">    namedWindow(&quot;contrast Image&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">    imshow(&quot;contrast Image&quot;, dst);</div><div class="line">    </div><div class="line">    waitKey(0);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么每次处理图片我们都需要把上面一长串代码拷贝到工程里面去吗，上述代码太多，其实opencv已经实现了上面功能。<br>filter2D函数可以实现上面效果，在第四个参数添加掩膜矩阵就可以实现相同效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//定义掩膜</div><div class="line">Mat kern = (Mat_&lt;char&gt;(3,3) &lt;&lt;  0, -1,  0,</div><div class="line">                               -1,  5, -1,</div><div class="line">                                0, -1,  0);</div></pre></td></tr></table></figure></p><p>上面代码可以用下面代码替代<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">double t = getTickCount();  //获得当前时间</div><div class="line">Mat kernel = (Mat_&lt;char&gt;(3, 3) &lt;&lt; 0, -1, 0, -1, 5, -1, 0, -1 ,0);</div><div class="line">//src.depth() 表示与原图深度一样，-1也表示一样</div><div class="line">filter2D(src, dst, src.depth(), kernel);</div><div class="line">double time = (getTickCount() - t) / getTickFrequency();</div><div class="line">printf(&quot;time consume %.5f&quot;, time);</div><div class="line">namedWindow(&quot;contrast Image&quot;, CV_WINDOW_AUTOSIZE);</div><div class="line">imshow(&quot;contrast Image&quot;, dst);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;矩阵基本操作&quot;&gt;&lt;a href=&quot;#矩阵基本操作&quot; class=&quot;headerlink&quot; title=&quot;矩阵基本操作&quot;&gt;&lt;/a&gt;矩阵基本操作&lt;/h4&gt;&lt;p&gt;opencv最基本的结构体是Mat，opencv提供了一系列Mat基本操作&lt;br&gt;加载图片cv::imgre
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://samychen.com/categories/OpenCV/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——sip日志分析</title>
    <link href="http://samychen.com/2017/10/03/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94sip%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <id>http://samychen.com/2017/10/03/pjsip开发——sip日志分析/</id>
    <published>2017-10-03T11:34:37.000Z</published>
    <updated>2018-02-25T04:55:30.602Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这一节将通过一个简单的例子来介绍一些基本的 SIP 操作。先让我们来诊视下图展示的两个用户代理之间的消息顺序。关于SIP协议详细流程，可以参考<a href="https://tools.ietf.org/pdf/rfc3261.pdf" target="_blank" rel="external">RFC3261-SIP协议</a>，当然如果不习惯的话可以参考中文翻译版<a href="https://pan.baidu.com/s/1smNJDnv" target="_blank" rel="external">RFC3261-SIP协议中文版</a></p><p>&emsp;&emsp;收到180响应时建立dialog叫做早期对话（early dialog）,收到2XX的应答开始才是真正的dialog建立。</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-f4d69214a2a81c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sip呼叫.png"></p><p>当然，这个代理可以有多个代理，其实也就就是多了代理服务器之间的转发过程，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-68bcd38bfe80937a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The SIP dialog flow"></p><h2 id="发起呼叫流程"><a href="#发起呼叫流程" class="headerlink" title="发起呼叫流程"></a>发起呼叫流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">//发出 INVITE请求</div><div class="line">Request: INVITE sip:100@172.20.16.107 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bK5DF007802335421F9A6DAE3DC9B49E54..</div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt; </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22243 INVITE </div><div class="line">Content-Type: application/sdp..</div><div class="line"></div><div class="line">//返回响应 100 Trying</div><div class="line">Response: SIP/2.0 100 Trying </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bK5DF007802335421F9A6DAE3DC9B49E54 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22243 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line"></div><div class="line">//如果被邀请方收到INVITE 请求，在应答呼叫之前接收到响应180 Ringing</div><div class="line">Response: SIP/2.0 180 Ringing </div><div class="line">Via: SIP/2.0/UDP </div><div class="line">172.20.16.107:5060;branch=z9hG4bK5DF007802335421F9A6DAE3DC9B49E54 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22243 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">//收到被邀请方应答呼叫的响应 200 OK</div><div class="line">Response: SIP/2.0 200 OK </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bK5DF007802335421F9A6DAE3DC9B49E54 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22243 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">//呼叫发起方收到200 OK消息，直接发送一个ACK确认消息给被邀请方</div><div class="line">Request: ACK sip:100@172.20.16.146 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bK30F7F7B47E45499BAC441059EFA2DEA2 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22243 ACK</div></pre></td></tr></table></figure><h2 id="接受呼叫过程"><a href="#接受呼叫过程" class="headerlink" title="接受呼叫过程"></a>接受呼叫过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">//接收到 INVITE请求</div><div class="line">Request: INVITE sip:300@172.20.16.107 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.146:5060;branch=z9hG4bK5490f4d8 </div><div class="line">From: &quot;ppp&quot; &lt;sip:100@172.20.16.146&gt;;tag=as45eb9e71 </div><div class="line">To: &lt;sip:300@172.20.16.107&gt; </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">Call-ID: 0ee9bea806059b0f2770ce5c060d5251@172.20.16.146 </div><div class="line">CSeq: 102 INVITE </div><div class="line">Date: Tue, 15 Mar 2005 05:41:21 GMT </div><div class="line">//发送回应100 Trying</div><div class="line">Response: SIP/2.0 100 Trying </div><div class="line">Via: SIP/2.0/UDP 172.20.16.146:5060;f=z9hG4bK5490f4d8 </div><div class="line">From: &quot;ppp&quot; &lt;sip:100@172.20.16.146&gt;;tag=as45eb9e71 </div><div class="line">To: &lt;sip:300@172.20.16.107&gt;;tag=3363667257 </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 0ee9bea806059b0f2770ce5c060d5251@172.20.16.146 </div><div class="line">CSeq: 102 INVITE </div><div class="line">//如果接受邀请，则在接受之前发送回应180 Ringing</div><div class="line">Response: SIP/2.0 180 Ringing </div><div class="line">Via: SIP/2.0/UDP 172.20.16.146:5060;branch=z9hG4bK5490f4d8 </div><div class="line">From: &quot;ppp&quot; &lt;sip:100@172.20.16.146&gt;;tag=as45eb9e71 </div><div class="line">To: &lt;sip:300@172.20.16.107&gt;;tag=3363667257 </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 0ee9bea806059b0f2770ce5c060d5251@172.20.16.146 </div><div class="line">CSeq: 102 INVITE </div><div class="line">如果决定应答呼叫，则发送200 Ok消息</div><div class="line">Response: SIP/2.0 200 Ok </div><div class="line">Via: SIP/2.0/UDP 172.20.16.146:5060;branch=z9hG4bK5490f4d8 </div><div class="line">From: &quot;ppp&quot; &lt;sip:100@172.20.16.146&gt;;tag=as45eb9e71 </div><div class="line">To: &lt;sip:300@172.20.16.107&gt;;tag=3363667257 </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 0ee9bea806059b0f2770ce5c060d5251@172.20.16.146 </div><div class="line">CSeq: 102 INVITE </div><div class="line">//接收到邀请方发来的ACK确认消息</div><div class="line">Request: ACK sip:300@172.20.16.107:5060 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.146:5060;branch=z9hG4bK74cf8e58 </div><div class="line">From: &quot;ppp&quot; &lt;sip:100@172.20.16.146&gt;;tag=as45eb9e71 </div><div class="line">To: &lt;sip:300@172.20.16.107&gt;;tag=3363667257 </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">Call-ID: 0ee9bea806059b0f2770ce5c060d5251@172.20.16.146 </div><div class="line">CSeq: 102 ACK</div></pre></td></tr></table></figure><h2 id="终止呼叫或拒绝接受邀请"><a href="#终止呼叫或拒绝接受邀请" class="headerlink" title="终止呼叫或拒绝接受邀请"></a>终止呼叫或拒绝接受邀请</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//发送BYE消息</div><div class="line">Request: BYE sip:100@172.20.16.146 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bK2CF3B0C22620465D988E1CC2C8A71C56 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22244 BYE </div><div class="line">返回200 OK消息</div><div class="line">Response: SIP/2.0 200 OK </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bK2CF3B0C22620465D988E1CC2C8A71C56 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=2549473886 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as30112a7b </div><div class="line">Call-ID: B2ADB3A5-CCB1-485D-AB6C-17D70D82D76E@172.20.16.107 </div><div class="line">CSeq: 22244 BYE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt;</div></pre></td></tr></table></figure><h2 id="取消邀请过程"><a href="#取消邀请过程" class="headerlink" title="取消邀请过程"></a>取消邀请过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">//发出 INVITE请求</div><div class="line">Request: INVITE sip:100@172.20.16.107 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt; </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 INVITE </div><div class="line">//返回响应 100 Trying</div><div class="line">Response: SIP/2.0 100 Trying </div><div class="line">Via: SIP/2.0/UDP </div><div class="line">172.20.16.107:5060;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as3324adcc </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">//返回响应180 Ringing</div><div class="line">Response: SIP/2.0 180 Ringing </div><div class="line">Via:SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as3324adcc </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">取消INVITE请求</div><div class="line">Request: CANCEL sip:100@172.20.16.107 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt; </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 CANCEL </div><div class="line">返回487请求终止应答</div><div class="line">Response: SIP/2.0 487 Request Terminated </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as3324adcc </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 INVITE </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">//返回应答200 OK</div><div class="line">Response: SIP/2.0 200 OK </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as3324adcc </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 CANCEL </div><div class="line">Contact: &lt;sip:100@172.20.16.146&gt; </div><div class="line">//发送ACK确认消息</div><div class="line">Request: ACK sip:100@172.20.16.107 SIP/2.0 </div><div class="line">Via: SIP/2.0/UDP 172.20.16.107:5060;rport;branch=z9hG4bKE7C2E749AA8B49C693EA90BE1BB367D6 </div><div class="line">From: 300 &lt;sip:300@172.20.16.107&gt;;tag=1829163469 </div><div class="line">To: &lt;sip:100@172.20.16.107&gt;;tag=as3324adcc </div><div class="line">Contact: &lt;sip:300@172.20.16.107:5060&gt; </div><div class="line">Call-ID: 7C09DBD4-85DE-4DA7-8881-A9B309F8E672@172.20.16.107 </div><div class="line">CSeq: 41305 ACK</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;这一节将通过一个简单的例子来介绍一些基本的 SIP 操作。先让我们来诊视下图展示的两个用户代理之间的消息顺序。关于SIP协议详细流程，可以参考&lt;a href=&quot;https://tools.ietf.org/pdf/rfc3261.pdf&quot; targe
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——呼叫流程</title>
    <link href="http://samychen.com/2017/10/02/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E5%91%BC%E5%8F%AB%E6%B5%81%E7%A8%8B/"/>
    <id>http://samychen.com/2017/10/02/pjsip开发——呼叫流程/</id>
    <published>2017-10-02T06:34:37.000Z</published>
    <updated>2018-02-25T04:55:00.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SIP呼叫流程"><a href="#SIP呼叫流程" class="headerlink" title="SIP呼叫流程"></a>SIP呼叫流程</h2><h3 id="注册注销过程"><a href="#注册注销过程" class="headerlink" title="注册注销过程"></a>注册注销过程</h3><p>&emsp;&emsp;SIP为用户定义了注册和注销过程，其目的是可以动态建立用户的逻辑地址和其当前联系地址之间的对应关系，以便实现呼叫路由和对用户移动性的支持。逻辑地址和联系地址的分离也方便了用户，它不论在何处、使用何种设备，都可以通过惟一的逻辑地址进行通信。</p><p>&emsp;&emsp;注册/注销过程是通过REGISTER消息和200成功响应来实现的。在注册/注销时，用户将其逻辑地址和当前联系地址通过REFGISTER消息发送给其注册服务器，注册服务器对该请求消息进行处理，并以200成功响应消息通知用户注册注销成功。</p><h3 id="呼叫过程"><a href="#呼叫过程" class="headerlink" title="呼叫过程"></a>呼叫过程</h3><p>&emsp;&emsp;SIP IP电话系统中的呼叫是通过INVITE邀请请求、成功响应和ACK确认请求的三次握手来实现的，即当主叫用户代理要发起呼叫时，它构造一个INVITE消息，并发送给被叫。被叫收到邀请后决定接受该呼叫，就回送一个成功响应(状态码为200)。主叫方收到成功响应后，向对方发送ACK请求。被叫收到ACK请求后，呼叫成功建立。</p><p>&emsp;&emsp;呼叫的终止通过BYE请求消息来实现。当参与呼叫的任一方要终止呼叫时，它就构造一个BYE请求消息，并发送给对方。对方收到BYE请求后，释放与此呼叫相关的资源，回送一个成功响应，表示呼叫已经终止。</p><p>&emsp;&emsp;当主、被叫双方已建立呼叫，如果任一方想要修改当前的通信参数(通信类型、编码等)，可以通过发送一个对话内的INVITE请求消息(称为re-INVITE)来实现。</p><h3 id="重定向过程"><a href="#重定向过程" class="headerlink" title="重定向过程"></a>重定向过程</h3><p>&emsp;&emsp;当重定向服务器(其功能可包含在代理服务器和用户终端中)收到主叫用户代理的INVITE邀请消息，它通过查找定位服务器发现该呼叫应该被重新定向(重定向的原因有多种，如用户位置改变、实现负荷分担等)，就构造一个重定向响应消息(状态码为3xx)，将新的目标地址回送给主叫用户代理。主叫用户代理收到重定向响应消息后，将逐一向新的目标地址发送INVITE邀请，直至收到成功响应并建立呼叫。如果尝试了所有的新目标都无法建立呼叫，则本次呼叫失败。</p><h3 id="SIP呼叫流程-1"><a href="#SIP呼叫流程-1" class="headerlink" title="SIP呼叫流程"></a>SIP呼叫流程</h3><p>下面结合具体场景介绍一下SIP呼叫的详细过程，具体字段解析见下一节。</p><h4 id="注册注销"><a href="#注册注销" class="headerlink" title="注册注销"></a>注册注销</h4><p><img src="http://upload-images.jianshu.io/upload_images/4398977-bd19cd1323e2f12d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>SIP注册流程</p><p>1． SIP用户向其所属的注册服务器发起REGISTER注册请求。在该请求消息中，Request-URI表明了注册服务器的域名地址，To头域包含了注册所准备生成．查询或修改的地址记录,Contact头域表明该注册用户在此次注册中欲绑定的地址，Contact头域中的Expires参数或者Expires头域表示了绑定在多长时间内有效。</p><p>2．  注册服务器返回401响应，要求用户进行鉴权。</p><p>3． SIP用户发送带有鉴权信息的注册请求。</p><p>4．  注册成功。</p><p>SIP用户的注销和注册更新流程基本与注册流程一致，只是在注销时Contact头域中的Expires参数或Expires头域值为0。</p><h4 id="代理方式呼叫流程"><a href="#代理方式呼叫流程" class="headerlink" title="代理方式呼叫流程"></a>代理方式呼叫流程</h4><p>1．  用户A向其所属的出域代理服务器(软交换)PROXY1发起INVITE请求消息，在该消息中的消息体中带有用户A的媒体属性SDP描述；</p><p>2． PROXY1返回407响应，要求鉴权；</p><p>3．  用户A发送ACK确认消息；</p><p>4．  用户A重新发送带有鉴权信息的INVITE请求；</p><p>5．  经过路有分析，PROXY1将请求转发到PROXY2;</p><p>6． PROXY1向用户A发送确认消息”100 TRYING”，表示正在对收到的请求进行处理；</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-5323b3b8e9332d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理方式呼叫.png"></p><p> 代理方式的SIP正常呼叫流程</p><p>7． PROXY2将INVITE请求转发到用户B；</p><p>8． PROXY2向PROXY1发送确认消息”100 TRYING”</p><p>9．  终端B振铃，向其归属的代理服务器(软交换)PROXY2返回”180 RINGING”响应。</p><p>10． PROXY2向PROXY1转发” 180 RINGING”;</p><p>11． PROXY1向用户A转发” 180 RINGING”，用户A所属的终端播放回铃音；</p><p>12．  用户B摘机，终端B向其归属的代理服务器(软交换)PROXY2返回对INVITE请求的”200 OK”响应，在该消息中的消息体中带有用户B的媒体属性SDP描述；</p><p>13． PROXY2向PROXY1转发”200 OK”；</p><p>14． PROXY1向用户A转发”200 OK”；</p><p>15．  用户A发送针对200响应的ACK确认请求消息；</p><p>16． PROXY1向PROXY2转发ACK请求消息；</p><p>17． PROXY2向用户B转发ACK请求消息，用户A与B之间建立双向RTP媒体流；</p><p>18．  用户B挂机，用户B向归属的代理服务器(软交换)PROXY2发送BYE请求消息；</p><p>19． PROXY2向PROXY1转发BYE请求消息；</p><p>20． PROXY1向用户A转发BYE请求消息；</p><p>21．  用户A返回对BYE请求的200 OK响应消息；</p><p>22． PROXY1向PROXY2转发200 OK请求消息；</p><p>23． PROXY2向用户B转发200 OK响应消息，通话结束。</p><h4 id="重定向方式呼叫流程"><a href="#重定向方式呼叫流程" class="headerlink" title="重定向方式呼叫流程"></a>重定向方式呼叫流程</h4><p><img src="http://upload-images.jianshu.io/upload_images/4398977-4bfc285b9ac56c94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 重定向.png"></p><p> 重定向方式呼叫流程</p><p>1．  用户A向重定向服务器发送INVITE请求消息，该消息不带SDP；</p><p>2．  重定向服务器返回”302 Moved temporarily响应”，该响应的Contact头域包含用户B当前更为精确的SIP地址；</p><p>3．  用户A向重定向服务器发送确认302响应响应受到的ACK消息；</p><p>4．  用户A向重定向代理服务器PROXY2发送INVITE请求消息，该消息不带SDP；</p><p>5． PROXY2向用户B转发INVITE请求；</p><p>6． PROXY2向用户A发送确认消息”100 TRYING”,表示正在对收到的请求进行处理；</p><p>7．  终端B振铃，向其归属的代理服务器(软交换)PROXY2返回”180 RINGING”响应；</p><p>8． PROXY2转发”180 RINGING”响应；</p><p>9．  用户B摘机，终端B返回对INVITE请求的”200 OK”响应，在该消息中的消息体中带有用户B的媒体属性SDP描述；</p><p>10． PROXY2转发”200 OK”响应；</p><p>11．  用户Ａ发送确认”200 OK”响应收到的ACK请求，该消息中带有用户A媒体的属性的SDP描述。</p><p>12． PROXY2转发ACK消息，用户A和用户B之间建立双向的媒体流；</p><p>13．  用户B挂机，用户B向PROXY2发送BYE球求消息；</p><p>14． PROXY2向用户A转发BYE请求消息；</p><p>15．  用户A返回对BYE请求的200 OK响应消息；</p><p>16． PROXY2向用户B转发200 OK响应消息，通话结束。</p><p>关于SIP协议详细流程，可以参考<a href="https://tools.ietf.org/pdf/rfc3261.pdf" target="_blank" rel="external">RFC3261-SIP协议</a>，当然如果不习惯的话可以参考中文翻译版<a href="https://pan.baidu.com/s/1smNJDnv" target="_blank" rel="external">RFC3261-SIP协议中文版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SIP呼叫流程&quot;&gt;&lt;a href=&quot;#SIP呼叫流程&quot; class=&quot;headerlink&quot; title=&quot;SIP呼叫流程&quot;&gt;&lt;/a&gt;SIP呼叫流程&lt;/h2&gt;&lt;h3 id=&quot;注册注销过程&quot;&gt;&lt;a href=&quot;#注册注销过程&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——Buddy</title>
    <link href="http://samychen.com/2017/09/25/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Buddy/"/>
    <id>http://samychen.com/2017/09/25/pjsip开发——Buddy/</id>
    <published>2017-09-25T08:34:37.000Z</published>
    <updated>2018-02-25T04:54:30.589Z</updated>
    
    <content type="html"><![CDATA[<p>PJSUA2的功能是围绕Buddy类为中心展开的。该类表示一个远端链接。</p><p>要使用Buddy类，需要根据需求实现其子类，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class MyBuddy extends Buddy &#123;</div><div class="line">    public BuddyConfig cfg;</div><div class="line"></div><div class="line">    MyBuddy(BuddyConfig config) &#123;</div><div class="line">        super();</div><div class="line">        cfg = config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String getStatusText() &#123;</div><div class="line">        BuddyInfo bi;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            bi = getInfo();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            return &quot;?&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String status = &quot;&quot;;</div><div class="line">        if (bi.getSubState() == pjsip_evsub_state.PJSIP_EVSUB_STATE_ACTIVE) &#123;</div><div class="line">            if (bi.getPresStatus().getStatus() ==</div><div class="line">                    pjsua_buddy_status.PJSUA_BUDDY_STATUS_ONLINE) &#123;</div><div class="line">                status = bi.getPresStatus().getStatusText();</div><div class="line">                if (status == null || status.length() == 0) &#123;</div><div class="line">                    status = &quot;Online&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125; else if (bi.getPresStatus().getStatus() ==</div><div class="line">                    pjsua_buddy_status.PJSUA_BUDDY_STATUS_OFFLINE) &#123;</div><div class="line">                status = &quot;Offline&quot;;</div><div class="line">            &#125; else &#123;</div><div class="line">                status = &quot;Unknown&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBuddyState() &#123;</div><div class="line">        MyApp.observer.notifyBuddyState(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在子类中，应用程序可以实现好友回调，以获得好友状态更改的通知。</p><h2 id="订阅好友的状态"><a href="#订阅好友的状态" class="headerlink" title="订阅好友的状态"></a>订阅好友的状态</h2><p>要订阅好友的状态，需添加好友对象并订阅好友的状态。下面的代码片段实现这些示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">                    bud.subscribePresence(true);</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p><p>可以在onBuddyState（）回调中获得好友的状态改变。</p><h2 id="响应订阅请求"><a href="#响应订阅请求" class="headerlink" title="响应订阅请求"></a>响应订阅请求</h2><p>默认情况下，会自动接受对帐户传入的（存在）订阅。您可能想要更改此行为，例如仅仅好友列表中的一个好友时自动接受订阅，以及任何其他用户提示是否希望接受请求的消息。</p><p>这可以通过重写Account类的onIncomingSubscribe（）方法来实现。 </p><h2 id="更改帐户的在线状态"><a href="#更改帐户的在线状态" class="headerlink" title="更改帐户的在线状态"></a>更改帐户的在线状态</h2><p>要更改帐户的状态，可使用Account.setOnlineStatus（）函数设置帐户的在线状态。</p><p>当更改存在状态时，帐户将根据自身配置将新状态发布给所有在线用户，使用PUBLISH请求或NOTIFY请求，或同时使用上述两个请求。</p><h2 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h2><p>可以使用Buddy.sendInstantMessage（）发送IM。传出即时消息的传输状态在Account类的Account.onInstantMessageStatus（）回调方法中给出。</p><p>除了发送即时消息，还可使用Buddy.sendTypingIndication（）向远程伙伴发送打字提示。</p><p>接收IM和不在呼叫范围内的打字提示将在回调函数Account.onInstantMessage（）和Account.onTypingIndication（）中给出(报告)。</p><p>或者，可使用Call.sendInstantMessage（）和Call.sendTypingIndication（）在呼叫中发送IM和键入指示。</p><p>关于上述详细类信息参考可以参照官方文档<a href="https://trac.pjsip.org/repos/browser#pjproject/trunk/doc/pjsip-book" target="_blank" rel="external">pjsip-book</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PJSUA2的功能是围绕Buddy类为中心展开的。该类表示一个远端链接。&lt;/p&gt;
&lt;p&gt;要使用Buddy类，需要根据需求实现其子类，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建crtmp服务器</title>
    <link href="http://samychen.com/2017/09/23/%E6%90%AD%E5%BB%BAcrtmp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://samychen.com/2017/09/23/搭建crtmp服务器/</id>
    <published>2017-09-23T08:15:00.000Z</published>
    <updated>2018-01-25T12:18:12.486Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;crtmpserver开源,在windows平台以及linux平台下都可以运行,但他是一个单线程的select模型，不能满足高并发的性能要求，想要对其进行并发结构修改，在实际项目对接情况下又有跟大的困难，并且实际情况下的技术瓶颈是出现在带宽上，想要用crtmpserver其实不是最好的选择。</p><p>如何<br>crtmp server搭建简单点播服务器步骤：</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-df41f8e629df8c4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点播服务器.png"></p><p>想要测试点播服务器是否搭建好，播放器可以采用potplayer或者VLC就可以了。</p><p>&emsp;&emsp;crtmpserver也可以搭建直播服务，初学者可以尝试使用crtmpserver搭建，也可以用red5搭建，但是想要实现更多的功能，推荐还是使用nginx和srs服务器，其中srs只支持linux系统，国内的点播服务器基本上也是使用这两种来搭建。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;crtmpserver开源,在windows平台以及linux平台下都可以运行,但他是一个单线程的select模型，不能满足高并发的性能要求，想要对其进行并发结构修改，在实际项目对接情况下又有跟大的困难，并且实际情况下的技术瓶颈是出现在带宽上，想要用
      
    
    </summary>
    
      <category term="安卓直播开发" scheme="http://samychen.com/categories/%E5%AE%89%E5%8D%93%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——Call</title>
    <link href="http://samychen.com/2017/09/23/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Call/"/>
    <id>http://samychen.com/2017/09/23/pjsip开发——Call/</id>
    <published>2017-09-23T06:34:37.000Z</published>
    <updated>2018-02-25T04:54:05.217Z</updated>
    
    <content type="html"><![CDATA[<p>呼叫使用Call来实现，一般根据需要我们需要自定义Call的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">class MyCall extends Call &#123;</div><div class="line">    public VideoWindow vidWin;</div><div class="line">    public VideoPreview vidPrev;</div><div class="line"></div><div class="line">    MyCall(MyAccount acc, int call_id) &#123;</div><div class="line">        super(acc, call_id);</div><div class="line">        vidWin = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCallState(OnCallStateParam prm) &#123;</div><div class="line">        MyApp.observer.notifyCallState(this);</div><div class="line">        try &#123;</div><div class="line">            CallInfo ci = getInfo();</div><div class="line">            if (ci.getState() ==</div><div class="line">                    pjsip_inv_state.PJSIP_INV_STATE_DISCONNECTED) &#123;</div><div class="line">                this.delete();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCallMediaState(OnCallMediaStateParam prm) &#123;</div><div class="line">        CallInfo ci;</div><div class="line">        try &#123;</div><div class="line">            ci = getInfo();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CallMediaInfoVector cmiv = ci.getMedia();</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; cmiv.size(); i++) &#123;</div><div class="line">            CallMediaInfo cmi = cmiv.get(i);</div><div class="line">            if (cmi.getType() == pjmedia_type.PJMEDIA_TYPE_AUDIO &amp;&amp;</div><div class="line">                    (cmi.getStatus() ==</div><div class="line">                            pjsua_call_media_status.PJSUA_CALL_MEDIA_ACTIVE ||</div><div class="line">                            cmi.getStatus() ==</div><div class="line">                                    pjsua_call_media_status.PJSUA_CALL_MEDIA_REMOTE_HOLD)) &#123;</div><div class="line">                // unfortunately, on Java too, the returned Media cannot be</div><div class="line">                // downcasted to AudioMedia</div><div class="line">                Media m = getMedia(i);</div><div class="line">                AudioMedia am = AudioMedia.typecastFromMedia(m);</div><div class="line"></div><div class="line">                // connect ports</div><div class="line">                try &#123;</div><div class="line">                    MyApp.ep.audDevManager().getCaptureDevMedia().</div><div class="line">                            startTransmit(am);</div><div class="line">                    am.startTransmit(MyApp.ep.audDevManager().</div><div class="line">                            getPlaybackDevMedia());</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125; else if (cmi.getType() == pjmedia_type.PJMEDIA_TYPE_VIDEO &amp;&amp;</div><div class="line">                    cmi.getStatus() ==</div><div class="line">                            pjsua_call_media_status.PJSUA_CALL_MEDIA_ACTIVE &amp;&amp;</div><div class="line">                    cmi.getVideoIncomingWindowId() != pjsua2.INVALID_ID) &#123;</div><div class="line">                vidWin = new VideoWindow(cmi.getVideoIncomingWindowId());</div><div class="line">                vidPrev = new VideoPreview(cmi.getVideoCapDev());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        MyApp.observer.notifyCallMediaState(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在具体实现类中，通过重写呼叫回调，用于处理与呼叫有关的事件，如呼叫状态更改或来电转接请求。</p><h4 id="呼叫"><a href="#呼叫" class="headerlink" title="呼叫"></a>呼叫</h4><p> 呼叫是一个非正式的术语，用来表示一个多媒体会话，用Call-ID来标识；不论两方通话还是在多方通话中，在每个UA中是使用同一个Call-ID.<br>拨出电话很简单，只需调用Call对象的makeCall（）方法即可。假设在“dest_uri”中将Account对象作为acc变量和目标URI字符串，可以使用下面的代码段发起呼出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    call.makeCall(buddy_uri, prm);</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">    call.delete();</div><div class="line">    return;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>调用<code>pjsua2JNI.Call_makeCall(swigCPtr, this, dst_uri, CallOpParam.getCPtr(prm), prm)</code></p><h4 id="接受来电"><a href="#接受来电" class="headerlink" title="接受来电"></a>接受来电</h4><p>来电将被报告为Account类的onIncomingCall（）。必须从Account类派生一个类来处理来电。</p><p>以下是回调实现的示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onIncomingCall(OnIncomingCallParam prm) &#123;</div><div class="line">        System.out.println(&quot;======== Incoming call ======== &quot;);</div><div class="line">        MyCall call = new MyCall(this, prm.getCallId());</div><div class="line">        MyApp.observer.notifyIncomingCall(call);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>所有呼叫属性，如状态，媒体状态，远端（远程对等体）信息等都存储为CallInfo类，可以使用Call的getInfo（）方法获取。</p><h4 id="呼叫断开"><a href="#呼叫断开" class="headerlink" title="呼叫断开"></a>呼叫断开</h4><p>呼叫断开事件是一个特殊的事件，因为一旦报告此事件的回调返回，该调用将不再有效，并且调用对象的任何操作将引发错误异常。因此，建议删除回调中的调用对象。</p><p>Call的onCallState（）方法报告呼叫断开，然后我们可以销毁此次通话Call：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onCallState(OnCallStateParam prm) &#123;</div><div class="line">        MyApp.observer.notifyCallState(this);</div><div class="line">        try &#123;</div><div class="line">            CallInfo ci = getInfo();</div><div class="line">            if (ci.getState() ==</div><div class="line">                    pjsip_inv_state.PJSIP_INV_STATE_DISCONNECTED) &#123;</div><div class="line">                this.delete();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h4 id="通话的音频媒体状态"><a href="#通话的音频媒体状态" class="headerlink" title="通话的音频媒体状态"></a>通话的音频媒体状态</h4><p>当呼叫的音频媒体准备就绪（或激活）时，只能使用呼叫的音频媒体（例如，连接会议电话中的声音设备的呼叫）。呼叫媒体状态的更改在onCallMediaState（）回调中报告，如果呼叫音频媒体已准备就绪（或活动），则Call.getMedia（）函数将返回有效的音频媒体。</p><h4 id="呼叫操作"><a href="#呼叫操作" class="headerlink" title="呼叫操作"></a>呼叫操作</h4><p>可以调用Call对象的操作，例如挂断，保持呼叫，发送re-INVITE等。</p><h4 id="即时消息（IM）"><a href="#即时消息（IM）" class="headerlink" title="即时消息（IM）"></a>即时消息（IM）</h4><p>可以使用Call.sendInstantMessage（）在通话中发送IM。Call.onInstantMessageStatus（）回调方法报告传出即时消息的传输状态。</p><p>除了发送即时消息，还可以使用Call.sendTypingIndication（）发送打字指示。</p><p>在呼叫中收到的IM和打字指示将在回调函数Call.onInstantMessage（）和Call.onTypingIndication（）中报告。</p><p>关于上述详细类信息参考可以参照官方文档<a href="https://trac.pjsip.org/repos/browser#pjproject/trunk/doc/pjsip-book" target="_blank" rel="external">pjsip-book</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;呼叫使用Call来实现，一般根据需要我们需要自定义Call的实现&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div clas
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——Account</title>
    <link href="http://samychen.com/2017/09/22/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Account/"/>
    <id>http://samychen.com/2017/09/22/pjsip开发——Account/</id>
    <published>2017-09-22T10:34:37.000Z</published>
    <updated>2018-02-25T04:53:37.557Z</updated>
    
    <content type="html"><![CDATA[<p>Account提供正在使用该应用程序的用户的身份（或身份）。一个帐户有一个与之相关的SIP统一资源标识符（URI）。</p><p>必须在应用程序中创建至少一个Account，因为任何外发请求都需要一个Account上下文。如果不需要用户关联，应用程序可以通过调用Account.create（）来创建一个无用户帐户。无用户帐户识别本地端点而不是特定用户，并且它对应于特定的传输ID。</p><p>还有一个Account必须设置为默认Account，当pjsua使用更严格的匹配规则无法将传入请求与任何帐户匹配时，用作帐户身份。</p><h2 id="自定义Account类"><a href="#自定义Account类" class="headerlink" title="自定义Account类"></a>自定义Account类</h2><p>要使用Account类，通常根据需求来自定义自己的实现类，以便接收该帐户的通知。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">   public MyBuddy addBuddy(BuddyConfig bud_cfg) &#123;</div><div class="line">    /* Create Buddy */</div><div class="line">        MyBuddy bud = new MyBuddy(bud_cfg);</div><div class="line">        try &#123;</div><div class="line">            bud.create(this, bud_cfg);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            bud.delete();</div><div class="line">            bud = null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (bud != null) &#123;</div><div class="line">            buddyList.add(bud);</div><div class="line">            if (bud_cfg.getSubscribe())</div><div class="line">                try &#123;</div><div class="line">                    bud.subscribePresence(true);</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bud;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void delBuddy(MyBuddy buddy) &#123;</div><div class="line">        buddyList.remove(buddy);</div><div class="line">        buddy.delete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void delBuddy(int index) &#123;</div><div class="line">        MyBuddy bud = buddyList.get(index);</div><div class="line">        buddyList.remove(index);</div><div class="line">        bud.delete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onRegState(OnRegStateParam prm) &#123;</div><div class="line">        MyApp.observer.notifyRegState(prm.getCode(), prm.getReason(),</div><div class="line">                prm.getExpiration());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onIncomingCall(OnIncomingCallParam prm) &#123;</div><div class="line">        System.out.println(&quot;======== Incoming call ======== &quot;);</div><div class="line">        MyCall call = new MyCall(this, prm.getCallId());</div><div class="line">        MyApp.observer.notifyIncomingCall(call);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onInstantMessage(OnInstantMessageParam prm) &#123;</div><div class="line">        System.out.println(&quot;======== Incoming pager ======== &quot;);</div><div class="line">        System.out.println(&quot;From     : &quot; + prm.getFromUri());</div><div class="line">        System.out.println(&quot;To       : &quot; + prm.getToUri());</div><div class="line">        System.out.println(&quot;Contact  : &quot; + prm.getContactUri());</div><div class="line">        System.out.println(&quot;Mimetype : &quot; + prm.getContentType());</div><div class="line">        System.out.println(&quot;Body     : &quot; + prm.getMsgBody());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在其子类中，应用程序可以实现帐户回调，基本用于处理与该帐户相关的事件，如：</p><ul><li>SIP注册的状态</li><li>传入呼叫</li><li>传入存在订阅请求</li><li>不是从伙伴传入的即时消息</li></ul><p>应用程序需要覆盖派生类中的相关回调方法来处理这些特定事件。</p><p>如果未处理事件，将调用默认操作：</p><ul><li>来电将不被处理</li><li>传入的存在订阅请求将被接受</li><li>来自非伙伴的传入即时消息将被忽略</li></ul><h2 id="创建帐号"><a href="#创建帐号" class="headerlink" title="创建帐号"></a>创建帐号</h2><p>我们需要配置AccountConfig并调用Account.create（）来创建帐户。至少，pjsua只需要帐户的ID，这是一个URI来标识帐户（或者在SIP术语中，它被称为记录地址/ AOR）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public MyAccount addAcc(AccountConfig cfg) &#123;</div><div class="line">    MyAccount acc = new MyAccount(cfg);</div><div class="line">    try &#123;</div><div class="line">        acc.create(cfg);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        acc = null;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    accList.add(acc);</div><div class="line">    return acc;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以上创建的帐户不会执行任何操作，除非在发件人的“发件人”标题中提供身份。该帐户不会注册到SIP服务器或任何东西。</p><p>通常，将希望该帐户认证并注册到SIP服务器，以便可以接收来电。为此，需要在AccountConfig中配置一些更多设置，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">accCfg = new AccountConfig();</div><div class="line">accCfg.setIdUri(&quot;sip:localhost&quot;);</div><div class="line">accCfg.getNatConfig().setIceEnabled(true);</div><div class="line">accCfg.getVideoConfig().setAutoTransmitOutgoing(true);</div><div class="line">accCfg.getVideoConfig().setAutoShowIncoming(true);</div></pre></td></tr></table></figure></p><h2 id="帐户配置"><a href="#帐户配置" class="headerlink" title="帐户配置"></a>帐户配置</h2><p>在AccountConfig中可以指定更多的设置，如：</p><ul><li>AccountRegConfig，指定注册设置，如注册服务器和重试间隔。</li><li>AccountSipConfig，用于指定SIP设置，如凭证信息和代理服务器。</li><li>AccountCallConfig，用于指定呼叫设置，例如是否需要可靠的临时响应（SIP 100rel）。</li><li>AccountPresConfig来指定状态设置，例如是否启用在线发布（PUBLISH）。</li><li>AccountMwiConfig，指定MWI（留言等待指示）设置。</li><li>AccountNatConfig，用于指定NAT设置，例如是否使用STUN或ICE。</li><li>AccountMediaConfig，用于指定媒体设置，如安全RTP（SRTP）相关设置。</li><li>AccountVideoConfig，用于指定视频设置，如默认捕获和渲染设备。</li></ul><p>Account对象能够进行的操作：</p><ul><li>管理注册</li><li>管理好友/联系人</li><li>管理在线状态</li></ul><p>关于上述详细类信息参考可以参照官方文档<a href="https://trac.pjsip.org/repos/browser#pjproject/trunk/doc/pjsip-book" target="_blank" rel="external">pjsip-book</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Account提供正在使用该应用程序的用户的身份（或身份）。一个帐户有一个与之相关的SIP统一资源标识符（URI）。&lt;/p&gt;
&lt;p&gt;必须在应用程序中创建至少一个Account，因为任何外发请求都需要一个Account上下文。如果不需要用户关联，应用程序可以通过调用Accou
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——Endpoint</title>
    <link href="http://samychen.com/2017/09/20/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Endpoint/"/>
    <id>http://samychen.com/2017/09/20/pjsip开发——Endpoint/</id>
    <published>2017-09-20T06:34:37.000Z</published>
    <updated>2018-02-25T04:52:53.328Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Endpoint"><a href="#Endpoint" class="headerlink" title="Endpoint"></a>Endpoint</h4><p>Endpoint类是一个单例类，应用程序必须创建一个，最多只能创建一个此类实例，然后才能执行其他任何操作，类似地，一旦该类被销毁，应用程序就不能调用任何库API。这个类是PJSUA2的核心类，它提供了以下功能：</p><ul><li>启动和关闭</li><li>定制配置，如核心UA（用户代理）SIP配置，媒体配置和日志记录配置<br>本章将介绍上述功能。</li></ul><p>要使用Endpoint类，通常应用程序不需要对其进行子类化，除非：</p><p>应用程序想要实现/覆盖端点回调方法以获取传输状态更改或NAT检测完成等事件<br>应用程序使用Endpoint.utilTimerSchedule（）API调度计时器。在这种情况下，应用程序需要实现onTimer（）回调以在计时器到期时获取通知。</p><h4 id="实例化端点"><a href="#实例化端点" class="headerlink" title="实例化端点"></a>实例化端点</h4><p>在其他任何事情之前，您必须实例化Endpoint类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Endpoint ep = new Endpoint();</div></pre></td></tr></table></figure></p><p>可以通过静态方法来检索Endpoint 实例。</p><h4 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h4><p>通过调用它的libCreate（）方法创建库：其实是调用pjsua2JNI.Endpoint_libCreate(swigCPtr, this)这个公共管理jni类来调用底层代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try&#123; </div><div class="line">    ep - &gt; libCreate （）; </div><div class="line">&#125;  catch （ Error ＆ err ） &#123; </div><div class="line">    cout &lt;&lt; &quot;Startup error: &quot; &lt;&lt; err.info() &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果发生错误，libCreate（）方法将引发异常，所以我们需要使用上面的try / catch子句来捕获异常。</p><h4 id="初始化库和配置设置"><a href="#初始化库和配置设置" class="headerlink" title="初始化库和配置设置"></a>初始化库和配置设置</h4><p>EpConfig类提供了允许定制以下设置的端点配置：</p><ul><li>UAConfig，指定核心SIP用户代理设置。</li><li>MediaConfig来指定各种媒体全局设置</li><li>LogConfig来自定义日志设置。</li></ul><p>要定制自己的协议配置信息，可以自定义EpConfig类的实现，并在端点初始化期间指定它们</p><p>接下来，您可以通过调用libInit（）来初始化库，调用<code>pjsua2JNI.Endpoint_libInit(swigCPtr, this, EpConfig.getCPtr(prmEpConfig), prmEpConfig)</code>底层代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try&#123; </div><div class="line">    EpConfig ep_cfg ; </div><div class="line">    //指定ep_cfg中设置的自定义</div><div class="line">     ep - &gt; libInit （ ep_cfg ）; </div><div class="line">&#125;  catch （ Error ＆ err ） &#123; </div><div class="line">    cout &lt;&lt;  “Startup error: ”  &lt;&lt; err 。info （） &lt;&lt; endl ; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的代码片段使用默认设置初始化库。</p><h4 id="创建一个或多个传输"><a href="#创建一个或多个传输" class="headerlink" title="创建一个或多个传输"></a>创建一个或多个传输</h4><p>应用程序需要创建一个或多个传输才能发送或接收SIP消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TransportConfig sipTpConfig = new TransportConfig();</div><div class="line">sipTpConfig.setPort(5060);</div><div class="line">ep.transportCreate(pjsip_transport_type_e.PJSIP_TRANSPORT_UDP, sipTpConfig);</div></pre></td></tr></table></figure></p><p>transportCreate（）方法返回新创建的传输ID，它使用传输类型和TransportConfig对象来自定义传输设置，如绑定地址和侦听端口号。没有这个，默认情况下，传输将被绑定到INADDR_ANY和任何可用的端口。</p><p>除了创建无用户帐户（使用Account.create（））外，没有实际使用Transport ID，如后面将解释的那样），并且可能在应用程序需要时显示传输列表给用户。</p><h4 id="启动库"><a href="#启动库" class="headerlink" title="启动库"></a>启动库</h4><p>现在我们准备开始图书馆了。我们需要启动库来完成初始化阶段，例如完成初始STUN地址解析，初始化/启动声音设备等。要启动库，请调用libStart（）方法：</p><h4 id="关闭库"><a href="#关闭库" class="headerlink" title="关闭库"></a>关闭库</h4><p>一旦应用程序退出，库需要关闭，以便资源可以释放回操作系统。虽然这可以通过删除Endpoint实例来完成，该实例将在内部调用libDestroy（）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ep.libDestroy();</div><div class="line">ep.delete();</div></pre></td></tr></table></figure></p><p>关于上述详细类信息参考可以参照官方文档<a href="https://trac.pjsip.org/repos/browser#pjproject/trunk/doc/pjsip-book" target="_blank" rel="external">pjsip-book</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Endpoint&quot;&gt;&lt;a href=&quot;#Endpoint&quot; class=&quot;headerlink&quot; title=&quot;Endpoint&quot;&gt;&lt;/a&gt;Endpoint&lt;/h4&gt;&lt;p&gt;Endpoint类是一个单例类，应用程序必须创建一个，最多只能创建一个此类实例，然后才能执行
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>pjsip开发——专网对讲机项目架构</title>
    <link href="http://samychen.com/2017/09/09/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E4%B8%93%E7%BD%91%E5%AF%B9%E8%AE%B2%E6%9C%BA%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84/"/>
    <id>http://samychen.com/2017/09/09/pjsip开发——专网对讲机项目架构/</id>
    <published>2017-09-09T06:34:37.000Z</published>
    <updated>2018-02-25T04:59:56.494Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于公司项目需求，开发了一套基于pjsip的智能终端对讲机项目，主要业务是语音实时通信功能。废话不多说，先看已经投入生产环境的项目代码截图<br><img src="http://upload-images.jianshu.io/upload_images/4398977-972a733550fdbedc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app.png"><br><img src="http://upload-images.jianshu.io/upload_images/4398977-0287b165f39a94dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sdk.png"><br>此项目代码比较庞大，采用组件化进行开发，分开管理，编译速度明显加快，其中核心功能是对语言实时通讯的实现，采用成熟的开源框架pjsip2.5版本实现，关于pjsip入门可以查询官方文档<a href="https://trac.pjsip.org/repos/wiki/Getting-Started/Android#Requirements" target="_blank" rel="external">pjsip for Android developer</a></p><p>项目代码其实是仿照谷歌的csipsimple进行二次开发，有些API可能已经在新的版本进行了变更，但这并不妨碍我们理解原理。</p><p>接下来的一系列文章将以MySipAPP为例介绍pjsip的原理。主要内容如下：</p><ul><li><a href="https://www.jianshu.com/p/89435e79ac26" target="_blank" rel="external">pjsip开发——Endpoint</a></li><li><a href="http://samychen.com/2017/09/22/pjsip%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94Account/">pjsip开发——Account</a></li><li><a href="https://www.jianshu.com/p/b3fa9c5827b8" target="_blank" rel="external">pjsip开发——Call</a></li><li><a href="https://www.jianshu.com/p/b1e9f7dce9e4" target="_blank" rel="external">pjsip开发——Buddy</a></li><li><a href="https://www.jianshu.com/p/67449718d21e" target="_blank" rel="external">pjsip开发——呼叫流程</a></li><li><a href="https://www.jianshu.com/p/c627695f1b55" target="_blank" rel="external">pjsip开发——sip日志分析</a></li></ul><p>下面是仿照pjsua2选择的一个简单项目地址：<a href="https://github.com/samychen/MySipApp.git" target="_blank" rel="external">MySipApp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;由于公司项目需求，开发了一套基于pjsip的智能终端对讲机项目，主要业务是语音实时通信功能。废话不多说，先看已经投入生产环境的项目代码截图&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_ima
      
    
    </summary>
    
      <category term="pjsip" scheme="http://samychen.com/categories/pjsip/"/>
    
    
  </entry>
  
  <entry>
    <title>FFmpeg实战 保存网络流</title>
    <link href="http://samychen.com/2017/09/03/FFmpeg%E5%AE%9E%E6%88%98-%E4%BF%9D%E5%AD%98%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    <id>http://samychen.com/2017/09/03/FFmpeg实战-保存网络流/</id>
    <published>2017-09-03T10:15:00.000Z</published>
    <updated>2018-01-25T12:17:26.860Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天我们开始正式进入FFmpeg的篇章，FFmpeg作为著名的开源框架，可以生成用于处理多媒体框架的库和程序，是音视频界内的圣经，市面上直播开发99%都是基于FFmpeg来开发的，这足以证明FFmpeg的强大。关于FFmpeg的源码和官方文档可以去<a href="http://ffmpeg.org/doxygen/trunk/index.html" target="_blank" rel="external">FFmpeg</a>下载源码和编译好的库。<br>&emsp;&emsp;闲话不多说，下面就开始今天的主要内容，FFmpeg保存网络流到本地<br>&emsp;&emsp;直播不像点播，当我们看到想看的内容时，我们不能倒退回去，但是我们可以保存直播流为本地文件，这样我们想看随时都可以。</p><p>保存网络流的流程主要有以下步骤：<br>               &emsp;&emsp; 第一步：注册所有的组件（编解码、滤镜特效处理库、封装格式处理库、工具库、音频采样数据格式转换库、视频像素数据格式转换等等…）<br>        &emsp;&emsp;第二步：获取视频流的封装信息，查找视频和音频流的位置<br>        &emsp;&emsp;第三步：查找视频和音频解码器id，根据解码器id打开解码器<br>        &emsp;&emsp;第四步：创建输出流并拷贝流上下文信息<br>        &emsp;&emsp;第五步：循环读取网络流，解码packet并写入本地<br>        &emsp;&emsp;第六步：关闭解码器释放内存</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">#include &quot;stdafx.h&quot;</div><div class="line">#include &quot;pch.h&quot;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;memory&gt;</div><div class="line">#include &lt;thread&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">AVFormatContext *inputContext = nullptr;</div><div class="line">AVFormatContext * outputContext;</div><div class="line">int64_t lastReadPacktTime ;</div><div class="line"></div><div class="line">static int interrupt_cb(void *ctx)</div><div class="line">&#123;</div><div class="line">int  timeout  = 3;</div><div class="line">if(av_gettime() - lastReadPacktTime &gt; timeout *1000 *1000)</div><div class="line">&#123;</div><div class="line">return -1;</div><div class="line">&#125;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">int OpenInput(string inputUrl)</div><div class="line">&#123;</div><div class="line">inputContext = avformat_alloc_context();</div><div class="line">lastReadPacktTime = av_gettime();</div><div class="line">inputContext-&gt;interrupt_callback.callback = interrupt_cb;</div><div class="line">int ret = avformat_open_input(&amp;inputContext, inputUrl.c_str(), nullptr,nullptr);</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;Input file open input failed\n&quot;);</div><div class="line">return  ret;</div><div class="line">&#125;</div><div class="line">ret = avformat_find_stream_info(inputContext,nullptr);</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;Find input file stream inform failed\n&quot;);</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_FATAL, &quot;Open input file  %s success\n&quot;,inputUrl.c_str());</div><div class="line">&#125;</div><div class="line">return ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">shared_ptr&lt;AVPacket&gt; ReadPacketFromSource()</div><div class="line">&#123;</div><div class="line">shared_ptr&lt;AVPacket&gt; packet(static_cast&lt;AVPacket*&gt;(av_malloc(sizeof(AVPacket))), [&amp;](AVPacket *p) &#123; av_packet_free(&amp;p); av_freep(&amp;p);&#125;);</div><div class="line">av_init_packet(packet.get());</div><div class="line">lastReadPacktTime = av_gettime();</div><div class="line">int ret = av_read_frame(inputContext, packet.get());</div><div class="line">if(ret &gt;= 0)</div><div class="line">&#123;</div><div class="line">return packet;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">return nullptr;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">void av_packet_rescale_ts(AVPacket *pkt, AVRational src_tb, AVRational dst_tb)</div><div class="line">&#123;</div><div class="line">if (pkt-&gt;pts != AV_NOPTS_VALUE)</div><div class="line">pkt-&gt;pts = av_rescale_q(pkt-&gt;pts, src_tb, dst_tb);</div><div class="line">if (pkt-&gt;dts != AV_NOPTS_VALUE)</div><div class="line">pkt-&gt;dts = av_rescale_q(pkt-&gt;dts, src_tb, dst_tb);</div><div class="line">if (pkt-&gt;duration &gt; 0)</div><div class="line">pkt-&gt;duration = av_rescale_q(pkt-&gt;duration, src_tb, dst_tb);</div><div class="line">&#125;</div><div class="line">int WritePacket(shared_ptr&lt;AVPacket&gt; packet)</div><div class="line">&#123;</div><div class="line">auto inputStream = inputContext-&gt;streams[packet-&gt;stream_index];</div><div class="line">auto outputStream = outputContext-&gt;streams[packet-&gt;stream_index];</div><div class="line">av_packet_rescale_ts(packet.get(),inputStream-&gt;time_base,outputStream-&gt;time_base);//时间戳转换，输入上下文与输出上下文时间基准不同</div><div class="line">//也可以用av_write_frame</div><div class="line">return av_interleaved_write_frame(outputContext, packet.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line">int OpenOutput(string outUrl)</div><div class="line">&#123;</div><div class="line"></div><div class="line">int ret  = avformat_alloc_output_context2(&amp;outputContext, nullptr, &quot;mpegts&quot;, outUrl.c_str());</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;open output context failed\n&quot;);</div><div class="line">goto Error;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ret = avio_open2(&amp;outputContext-&gt;pb, outUrl.c_str(), AVIO_FLAG_WRITE,nullptr, nullptr);</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;open avio failed&quot;);</div><div class="line">goto Error;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for(int i = 0; i &lt; inputContext-&gt;nb_streams; i++)</div><div class="line">&#123;</div><div class="line">//输出依赖于输入</div><div class="line">AVStream * stream = avformat_new_stream(outputContext, inputContext-&gt;streams[i]-&gt;codec-&gt;codec);</div><div class="line">ret = avcodec_copy_context(stream-&gt;codec, inputContext-&gt;streams[i]-&gt;codec);</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;copy coddec context failed&quot;);</div><div class="line">goto Error;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ret = avformat_write_header(outputContext, nullptr);</div><div class="line">if(ret &lt; 0)</div><div class="line">&#123;</div><div class="line">av_log(NULL, AV_LOG_ERROR, &quot;format write header failed&quot;);</div><div class="line">goto Error;</div><div class="line">&#125;</div><div class="line"></div><div class="line">av_log(NULL, AV_LOG_FATAL, &quot; Open output file success %s\n&quot;,outUrl.c_str());</div><div class="line">return ret ;</div><div class="line">Error:</div><div class="line">if(outputContext)</div><div class="line">&#123;</div><div class="line">for(int i = 0; i &lt; outputContext-&gt;nb_streams; i++)</div><div class="line">&#123;</div><div class="line">avcodec_close(outputContext-&gt;streams[i]-&gt;codec);</div><div class="line">&#125;</div><div class="line">avformat_close_input(&amp;outputContext);</div><div class="line">&#125;</div><div class="line">return ret ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void CloseInput()</div><div class="line">&#123;</div><div class="line">if(inputContext != nullptr)</div><div class="line">&#123;</div><div class="line">avformat_close_input(&amp;inputContext);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void CloseOutput()</div><div class="line">&#123;</div><div class="line">if(outputContext != nullptr)</div><div class="line">&#123;</div><div class="line">for(int i = 0 ; i &lt; outputContext-&gt;nb_streams; i++)</div><div class="line">&#123;</div><div class="line">AVCodecContext *codecContext = outputContext-&gt;streams[i]-&gt;codec;</div><div class="line">avcodec_close(codecContext);</div><div class="line">&#125;</div><div class="line">avformat_close_input(&amp;outputContext);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">void Init()</div><div class="line">&#123;</div><div class="line">av_register_all();</div><div class="line">avfilter_register_all();</div><div class="line">avformat_network_init();</div><div class="line">av_log_set_level(AV_LOG_ERROR);</div><div class="line">&#125;</div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">Init();</div><div class="line">int ret = OpenInput(&quot;rtmp://v1.one-tv.com/live/mpegts.stream&quot;);</div><div class="line">if(ret &gt;= 0)</div><div class="line">&#123;</div><div class="line">//rtmp://192.168.1.107/oflaDemo/test</div><div class="line">//ret = OpenOutput(&quot;rtmp://127.0.0.1:1935/live/stream0&quot;); //播放地址为rtmp://127.0.0.1/live/stream0 live=1</div><div class="line">ret = OpenOutput(&quot;D:\\test.ts&quot;); </div><div class="line">&#125;</div><div class="line">if(ret &lt;0) goto Error;</div><div class="line"></div><div class="line">while(true)</div><div class="line">&#123;</div><div class="line">auto packet = ReadPacketFromSource();</div><div class="line">if(packet)</div><div class="line">&#123;</div><div class="line">ret = WritePacket(packet);</div><div class="line">if(ret &gt;= 0)</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;WritePacket Success!&quot;&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;WritePacket failed!&quot;&lt;&lt;endl;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Error:</div><div class="line">CloseInput();</div><div class="line">CloseOutput();</div><div class="line">while(true)</div><div class="line">&#123;</div><div class="line">this_thread::sleep_for(chrono::seconds(100));</div><div class="line">&#125;</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;在上面代码函数里面有个函数av_packet_rescale_ts是不是看不懂，其实这里是跳调整时间戳，因为输入和输出流的时间基准不一定相同，所有这里需要进行时间戳转换。</p><p>&emsp;&emsp;interrupt_cb这个函数的官方解释是为I/O层自定义中断回调，在avformat_open_input之前设置，其实就是读取输入数据时的一个回调，在这里我们稍微做一个超时处理，如果读取超过3秒就返回一个错误码中断读取流数据。</p><p>&emsp;&emsp;好了，利用FFmpeg保存网络流就是这么简单，这里留个扩展，你可以试试利用FFmpeg保存网络图片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今天我们开始正式进入FFmpeg的篇章，FFmpeg作为著名的开源框架，可以生成用于处理多媒体框架的库和程序，是音视频界内的圣经，市面上直播开发99%都是基于FFmpeg来开发的，这足以证明FFmpeg的强大。关于FFmpeg的源码和官方文档可以去&lt;
      
    
    </summary>
    
      <category term="安卓直播开发" scheme="http://samychen.com/categories/%E5%AE%89%E5%8D%93%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>视频编解码学习四 边解码边播放视频</title>
    <link href="http://samychen.com/2017/09/02/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E5%9B%9B-%E8%BE%B9%E8%A7%A3%E7%A0%81%E8%BE%B9%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91/"/>
    <id>http://samychen.com/2017/09/02/视频编解码学习四-边解码边播放视频/</id>
    <published>2017-09-02T09:15:00.000Z</published>
    <updated>2018-01-25T12:16:38.144Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上一节说到了播放本地的yuv文件，这节我们省去解码保存yuv文件，直接边解码边播放。流程还是同直接解码流程一样。</p><p><img src="http://upload-images.jianshu.io/upload_images/4398977-f889d70e2f360717.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"><br>SDL2.0显示YUV的流程图：<br><img src="http://upload-images.jianshu.io/upload_images/4398977-255f44eaeabdf0f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;android/log.h&gt;</div><div class="line"></div><div class="line">#define LOG_I(...) __android_log_print(ANDROID_LOG_ERROR , &quot;main&quot;, __VA_ARGS__)</div><div class="line"></div><div class="line">#include &quot;SDL.h&quot;</div><div class="line">#include &quot;SDL_log.h&quot;</div><div class="line">#include &quot;SDL_main.h&quot;</div><div class="line"></div><div class="line">////avcodec:编解码(最重要的库)</div><div class="line">//#include &quot;libavcodec/avcodec.h&quot;</div><div class="line">////avformat:封装格式处理</div><div class="line">//#include &quot;libavformat/avformat.h&quot;</div><div class="line">////avutil:工具库(大部分库都需要这个库的支持)</div><div class="line">//#include &quot;libavutil/imgutils.h&quot;</div><div class="line">////swscale:视频像素数据格式转换</div><div class="line">//#include &quot;libswscale/swscale.h&quot;</div><div class="line">////导入音频采样数据格式转换库</div><div class="line">//#include &quot;libswresample/swresample.h&quot;</div><div class="line"></div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#include &quot;libavcodec/avcodec.h&quot;</div><div class="line">#include &quot;libavformat/avformat.h&quot;</div><div class="line">#include &quot;libavutil/imgutils.h&quot;</div><div class="line">#include &quot;libswscale/swscale.h&quot;</div><div class="line">&#125;</div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    const char *cinputFilePath = &quot;/storage/emulated/0/Test.mov&quot;;</div><div class="line">    //第一步：注册所有组件</div><div class="line">    av_register_all();</div><div class="line">    //支持网络流输入</div><div class="line">    avformat_network_init();</div><div class="line">    //第二步：打开视频输入文件</div><div class="line">    //参数一：封装格式上下文-&gt;AVFormatContext-&gt;包含了视频信息(视频格式、大小等等...)</div><div class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</div><div class="line">    //参数二：打开文件(入口文件)-&gt;url</div><div class="line">    int avformat_open_result = avformat_open_input(&amp;pFormatCtx, cinputFilePath, NULL, NULL);</div><div class="line">    if (avformat_open_result != 0) &#123;</div><div class="line">        //获取异常信息</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avformat_open_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;异常信息：%s&quot;, error_info);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    //第三步：查找视频文件信息</div><div class="line">    //参数一：封装格式上下文-&gt;AVFormatContext</div><div class="line">    //参数二：配置</div><div class="line">    //返回值：0&gt;=返回OK，否则失败</div><div class="line">    int avformat_find_stream_info_result = avformat_find_stream_info(pFormatCtx, NULL);</div><div class="line">    if (avformat_find_stream_info_result &lt; 0) &#123;</div><div class="line">        //获取失败</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avformat_find_stream_info_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;异常信息：%s&quot;, error_info);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    // Dump valid information onto standard error可忽略</div><div class="line">    av_dump_format(pFormatCtx, 0, cinputFilePath, false);</div><div class="line"></div><div class="line">    //第四步：查找解码器</div><div class="line">    //第一点：获取当前解码器是属于什么类型解码器-&gt;找到了视频流</div><div class="line">    //音频解码器、视频解码器、字幕解码器等等...</div><div class="line">    //获取视频解码器流引用-&gt;指针</div><div class="line">    int av_stream_index = -1;</div><div class="line">    for (int i = 0; i &lt; pFormatCtx-&gt;nb_streams; ++i) &#123;</div><div class="line">        //循环遍历每一流</div><div class="line">        //视频流、音频流、字幕流等等...</div><div class="line">        if (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</div><div class="line">            //找到了</div><div class="line">            av_stream_index = i;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (av_stream_index == -1) &#123;</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;%s&quot;, &quot;没有找到视频流&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //第二点：根据视频流-&gt;查找到视频解码器上下文-&gt;视频压缩数据</div><div class="line">    AVCodecContext *avcodec_context = pFormatCtx-&gt;streams[av_stream_index]-&gt;codec;</div><div class="line">    //第三点：根据解码器上下文-&gt;获取解码器ID</div><div class="line">    AVCodec *avcodec = avcodec_find_decoder(avcodec_context-&gt;codec_id);</div><div class="line">    if (avcodec == NULL) &#123;</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;%s&quot;, &quot;没有找到视频解码器&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    //第五步：打开解码器</div><div class="line">    int avcodec_open2_result = avcodec_open2(avcodec_context, avcodec, NULL);</div><div class="line">    if (avcodec_open2_result != 0) &#123;</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avcodec_open2_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;异常信息：%s&quot;, error_info);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    //输出视频信息</div><div class="line">    //输出：文件格式</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;文件格式：%s&quot;, pFormatCtx-&gt;iformat-&gt;name);</div><div class="line">    //输出：解码器名称</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;解码器名称：%s&quot;, avcodec-&gt;name);</div><div class="line">    //第六步：循环读取视频帧，进行循环解码-&gt;输出YUV420P视频-&gt;格式：yuv格式</div><div class="line">    //读取帧数据换成到哪里-&gt;缓存到packet里面</div><div class="line">    AVPacket *av_packet = (AVPacket *) av_malloc(sizeof(AVPacket));</div><div class="line">    //输入-&gt;环境一帧数据-&gt;缓冲区-&gt;类似于一张图</div><div class="line">    AVFrame *av_frame_in = av_frame_alloc();</div><div class="line">    //输出-&gt;帧数据-&gt;视频像素数据格式-&gt;yuv420p</div><div class="line">    AVFrame *av_frame_out_yuv420p = av_frame_alloc();</div><div class="line">    //解码的状态类型(0:表示解码完毕，非0:表示正在解码)</div><div class="line">    int av_decode_result, current_frame_index = 0;</div><div class="line">    //只有指定了AVFrame的像素格式、画面大小才能真正分配内存</div><div class="line">    //缓冲区</div><div class="line">    //作用：计算音频/视频占用的字节数，开辟对应的内存空间</div><div class="line">    //参数一：缓冲区格式</div><div class="line">    //参数二：缓冲区宽度</div><div class="line">    //参数三：缓冲区高度</div><div class="line">    //参数四：字节对齐(设置通用1)</div><div class="line">    int image_size = av_image_get_buffer_size(AV_PIX_FMT_YUV420P, avcodec_context-&gt;width, avcodec_context-&gt;height,1);</div><div class="line">    //开辟缓存空间</div><div class="line">    uint8_t *frame_buffer_out = (uint8_t *)av_malloc(image_size);</div><div class="line">    //对开辟的缓存空间指定填充数据格式</div><div class="line">    //参数一：数据</div><div class="line">    //参数二：行数</div><div class="line">    //参数三：缓存区</div><div class="line">    //参数四：格式</div><div class="line">    //参数五：宽度</div><div class="line">    //参数六：高度</div><div class="line">    //参数七：字节对齐(设置通用1)</div><div class="line">    av_image_fill_arrays(av_frame_out_yuv420p-&gt;data, av_frame_out_yuv420p-&gt;linesize,frame_buffer_out,</div><div class="line">                         AV_PIX_FMT_YUV420P,avcodec_context-&gt;width, avcodec_context-&gt;height,1);</div><div class="line">    //准备一个视频像素数据格式上下文</div><div class="line">    //参数一：输入帧数据宽</div><div class="line">    //参数二：输入帧数据高</div><div class="line">    //参数三：输入帧数据格式</div><div class="line">    //参数四：输出帧数据宽</div><div class="line">    //参数五：输出帧数据高</div><div class="line">    //参数六：输出帧数据格式-&gt;AV_PIX_FMT_YUV420P</div><div class="line">    //参数七：视频像素数据格式转换算法类型</div><div class="line">    //参数八：字节对齐类型(C/C++里面)-&gt;提高读取效率</div><div class="line">    SwsContext *sws_context = sws_getContext(avcodec_context-&gt;width,</div><div class="line">                                             avcodec_context-&gt;height,</div><div class="line">                                             avcodec_context-&gt;pix_fmt,</div><div class="line">                                             avcodec_context-&gt;width,</div><div class="line">                                             avcodec_context-&gt;height,</div><div class="line">                                             AV_PIX_FMT_YUV420P,</div><div class="line">                                             SWS_BICUBIC, NULL, NULL, NULL);</div><div class="line">    // 加载SDL</div><div class="line">    //第一步：初始化SDL多媒体框架-&gt;SDL_Init</div><div class="line">    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER) == -1) &#123;</div><div class="line">        LOG_I(&quot;SDL_Init failed %s&quot;, SDL_GetError());</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    LOG_I(&quot;SDL_Init Success!&quot;);</div><div class="line">    //第二步：初始化SDL窗口</div><div class="line">    //参数一：窗口名称-&gt;要求必需是UTF-8编码</div><div class="line">    //参数二：窗口在屏幕上面X坐标</div><div class="line">    //参数三：窗口在屏幕上面Y坐标</div><div class="line">    //参数四：窗口在屏幕上面宽</div><div class="line">    int width = 640;</div><div class="line">    //参数五：窗口在屏幕上面高</div><div class="line">    int height = 352;</div><div class="line">    //参数六：窗口状态(打开的状态:SDL_WINDOW_OPENGL)</div><div class="line">    SDL_Window *sdl_window = SDL_CreateWindow(&quot;SDL播放器&quot;,</div><div class="line">                                              SDL_WINDOWPOS_CENTERED,</div><div class="line">                                              SDL_WINDOWPOS_CENTERED,</div><div class="line">                                              width,</div><div class="line">                                              height,</div><div class="line">                                              SDL_WINDOW_OPENGL);</div><div class="line">    if (sdl_window == NULL) &#123;</div><div class="line">        LOG_I(&quot;窗口创建失败&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    //第三步：创建渲染器-&gt;渲染窗口(OpenGL ES)</div><div class="line">    //最新一期VIP课程</div><div class="line">    //参数一：渲染目标窗口</div><div class="line">    //参数二：从哪里开始渲染(-1:默认从第一个为止开始)</div><div class="line">    //参数三：渲染类型</div><div class="line">    //SDL_RENDERER_SOFTWARE:软件渲染</div><div class="line">    //...</div><div class="line">    SDL_Renderer *sdl_renderer = SDL_CreateRenderer(sdl_window, -1, 0);</div><div class="line">    //第四步：创建纹理</div><div class="line">    //参数一：纹理目标渲染器</div><div class="line">    //参数二：渲染格式</div><div class="line">    //参数三：绘制方式(SDL_TEXTUREACCESS_STREAMING:频繁绘制)</div><div class="line">    //参数四：纹理宽</div><div class="line">    //参数五：纹理高</div><div class="line">    SDL_Texture *sdl_texture = SDL_CreateTexture(sdl_renderer,</div><div class="line">                                                 SDL_PIXELFORMAT_IYUV,</div><div class="line">                                                 SDL_TEXTUREACCESS_STREAMING,</div><div class="line">                                                 width,</div><div class="line">                                                 height);</div><div class="line">    SDL_Rect sdl_rect;</div><div class="line">    sdl_rect.x = 0;</div><div class="line">    sdl_rect.y = 0;</div><div class="line">    sdl_rect.w = width;</div><div class="line">    sdl_rect.h = height;</div><div class="line">    //&gt;=0:说明有数据，继续读取</div><div class="line">    //&lt;0:说明读取完毕，结束</div><div class="line">    while (av_read_frame(pFormatCtx, av_packet) &gt;= 0) &#123;</div><div class="line">        //解码什么类型流(视频流、音频流、字幕流等等...)</div><div class="line">        if (av_packet-&gt;stream_index == av_stream_index) &#123;</div><div class="line">            //扩展知识面(有更新)</div><div class="line">            //解码一帧视频流数据</div><div class="line">            //分析：avcodec_decode_video2函数</div><div class="line">            //参数一：解码器上下文</div><div class="line">            //参数二：一帧数据</div><div class="line">            //参数三：got_picture_ptr-&gt;是否正在解码(0:表示解码完毕，非0:表示正在解码)</div><div class="line">            //参数四：一帧压缩数据(对压缩数据进行解码操作)</div><div class="line">            //返回值：av_decode_result == 0表示解码一帧数据成功，否则失败</div><div class="line">            //av_decode_result = avcodec_decode_video2(avcodec_context,av_frame_in,&amp;got_picture_ptr,av_packet);</div><div class="line">            //新的API操作</div><div class="line">            //发送一帧数据-&gt;接收一帧数据</div><div class="line">            //发送一帧数据</div><div class="line">            avcodec_send_packet(avcodec_context, av_packet);</div><div class="line">            //接收一帧数据-&gt;解码一帧</div><div class="line">            av_decode_result = avcodec_receive_frame(avcodec_context, av_frame_in);</div><div class="line">            //解码出来的每一帧数据成功之后，将每一帧数据保存为YUV420格式文件类型(.yuv文件格式)</div><div class="line">            if (av_decode_result == 0) &#123;</div><div class="line">                //sws_scale：作用将视频像素数据格式-&gt;yuv420p格式</div><div class="line">                //输出.yuv文件-&gt;视频像素数据格式文件-&gt;输出到文件API</div><div class="line">                //参数一：视频像素数据格式-&gt;上下文</div><div class="line">                //参数二：输入数据</div><div class="line">                //参数三：输入画面每一行的大小</div><div class="line">                //参数四：输入画面每一行的要转码的开始位置</div><div class="line">                //参数五：每一帧数据高</div><div class="line">                //参数六：输出画面数据</div><div class="line">                //参数七：输出画面每一行的大小</div><div class="line">                sws_scale(sws_context,</div><div class="line">                          (const uint8_t *const *) av_frame_in-&gt;data,</div><div class="line">                          av_frame_in-&gt;linesize,</div><div class="line">                          0,</div><div class="line">                          avcodec_context-&gt;height,</div><div class="line">                          av_frame_out_yuv420p-&gt;data,</div><div class="line">                          av_frame_out_yuv420p-&gt;linesize);</div><div class="line">                //  sart SDL  //</div><div class="line">                //SDL渲染实现</div><div class="line">                //设置纹理数据</div><div class="line">                //参数一：目标纹理对象</div><div class="line">                //参数二：渲染区域(NULL:表示默认屏幕窗口宽高)</div><div class="line">                //参数三：视频像素数据</div><div class="line">                //参数四：帧画面宽</div><div class="line">                SDL_UpdateTexture(sdl_texture, NULL, av_frame_out_yuv420p-&gt;data[0],</div><div class="line">                                  av_frame_out_yuv420p-&gt;linesize[0]);</div><div class="line">                //先清空</div><div class="line">                SDL_RenderClear(sdl_renderer);</div><div class="line">                //再渲染</div><div class="line">                SDL_RenderCopy(sdl_renderer, sdl_texture, NULL, &amp;sdl_rect);</div><div class="line">                //第七步：显示帧画面</div><div class="line">                SDL_RenderPresent(sdl_renderer);</div><div class="line">                //第八步：延时渲染(没渲染一帧间隔时间)</div><div class="line">                SDL_Delay(20);</div><div class="line">                // end SDL //</div><div class="line">                current_frame_index++;</div><div class="line">                __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;当前遍历第%d帧&quot;, current_frame_index);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //第七步：关闭解码组件-&gt;释放内存</div><div class="line">    SDL_DestroyTexture(sdl_texture);</div><div class="line">    SDL_DestroyRenderer(sdl_renderer);</div><div class="line">    //第十步：推出SDL程序</div><div class="line">    SDL_Quit();</div><div class="line">    av_packet_free(&amp;av_packet);</div><div class="line">    av_frame_free(&amp;av_frame_in);</div><div class="line">    av_frame_free(&amp;av_frame_out_yuv420p);</div><div class="line">    avcodec_close(avcodec_context);</div><div class="line">    avformat_free_context(pFormatCtx);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FFmpeg在解码一帧之后转换像素数据格式，并没有立马进行渲染，这里延时了20毫秒，如果没有延时这20毫秒，视频一下子就可以播放完毕了。实际在播放视频时，SDL延时不能使用固定值，需要根据视频的pts来计算，同时要考虑视频和音频直接的同步，这里先不做进一步研究了，之后的博客会给出延时时间的计算。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/samychen/SDL_FFmpeg_Tutorial" target="_blank" rel="external">https://github.com/samychen/SDL_FFmpeg_Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;上一节说到了播放本地的yuv文件，这节我们省去解码保存yuv文件，直接边解码边播放。流程还是同直接解码流程一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/43989
      
    
    </summary>
    
      <category term="安卓直播开发" scheme="http://samychen.com/categories/%E5%AE%89%E5%8D%93%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>视频编解码学习三 播放yuv格式视频</title>
    <link href="http://samychen.com/2017/09/01/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B8%89-%E6%92%AD%E6%94%BEyuv%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/"/>
    <id>http://samychen.com/2017/09/01/视频编解码学习三-播放yuv格式视频/</id>
    <published>2017-09-01T08:15:00.000Z</published>
    <updated>2018-01-25T15:27:29.495Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天的主题是播放yuv格式视频。<br>在上两篇博客里面介绍过了如何将视频解码为单独的视频和音频，但是如果播放这些格式的文件呢，安卓原生是没有这些控件来直播播放yuv格式视频的，必须通过借助其他方式来播放，今天就介绍SDL2来解码播放yuv文件。</p><h4 id="SDL"><a href="#SDL" class="headerlink" title="SDL"></a>SDL</h4><p>&emsp;&emsp;什么是SDL？SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，专门用来开发多媒体，游戏等。详细想了解的可以去<a href="https://wiki.libsdl.org/" target="_blank" rel="external">SDL</a>官方文档查看</p><p>下面是FFmpeg官方给出的播放流程<br><img src="http://upload-images.jianshu.io/upload_images/4398977-b6aa3b7ee5e0791e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>根据上面的流程，在得到yuv像素数据的时候就可以渲染了</p><p>采用SDL播放yuv文件播放流程:<br>               &emsp;&emsp; 第一步：初始化SDL多媒体框架-&gt;SDL_Init<br>        &emsp;&emsp;第二步：初始化SDL窗口<br>        &emsp;&emsp;第三步：创建渲染器-&gt;渲染窗口(OpenGL ES)<br>        &emsp;&emsp;第四步：设置纹理数据-&gt;播放YUV视频<br>        &emsp;&emsp;第五步：将纹理数据拷贝到渲染器<br>        &emsp;&emsp;第六步：显示帧画面<br>        &emsp;&emsp;第七步：退出SDL释放内存</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;android/log.h&gt;</div><div class="line"></div><div class="line">#define LOG_I(...) __android_log_print(ANDROID_LOG_ERROR , &quot;main&quot;, __VA_ARGS__)</div><div class="line"></div><div class="line">#include &quot;SDL.h&quot;</div><div class="line">#include &quot;SDL_log.h&quot;</div><div class="line">#include &quot;SDL_main.h&quot;</div><div class="line"></div><div class="line">////avcodec:编解码(最重要的库)</div><div class="line">//#include &quot;libavcodec/avcodec.h&quot;</div><div class="line">////avformat:封装格式处理</div><div class="line">//#include &quot;libavformat/avformat.h&quot;</div><div class="line">////avutil:工具库(大部分库都需要这个库的支持)</div><div class="line">//#include &quot;libavutil/imgutils.h&quot;</div><div class="line">////swscale:视频像素数据格式转换</div><div class="line">//#include &quot;libswscale/swscale.h&quot;</div><div class="line">////导入音频采样数据格式转换库</div><div class="line">//#include &quot;libswresample/swresample.h&quot;</div><div class="line"></div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#include &quot;libavcodec/avcodec.h&quot;</div><div class="line">#include &quot;libavformat/avformat.h&quot;</div><div class="line">#include &quot;libavutil/imgutils.h&quot;</div><div class="line">#include &quot;libswscale/swscale.h&quot;</div><div class="line">&#125;</div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    //第一步：初始化SDL多媒体框架-&gt;SDL_Init</div><div class="line">    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER) == -1) &#123;</div><div class="line">        LOG_I(&quot;SDL_Init failed %s&quot;, SDL_GetError());</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    LOG_I(&quot;SDL_Init Success!&quot;);</div><div class="line"></div><div class="line">    //第二步：初始化SDL窗口</div><div class="line">    //参数一：窗口名称-&gt;要求必需是UTF-8编码</div><div class="line">    //参数二：窗口在屏幕上面X坐标</div><div class="line">    //参数三：窗口在屏幕上面Y坐标</div><div class="line">    //参数四：窗口在屏幕上面宽</div><div class="line">    int width = 640;</div><div class="line">    //参数五：窗口在屏幕上面高</div><div class="line">    int height = 352;</div><div class="line">    //参数六：窗口状态(打开的状态:SDL_WINDOW_OPENGL)</div><div class="line">    SDL_Window* sdl_window = SDL_CreateWindow(&quot;SDL播放器&quot;,</div><div class="line">                                              SDL_WINDOWPOS_CENTERED,</div><div class="line">                                              SDL_WINDOWPOS_CENTERED,</div><div class="line">                                              width ,</div><div class="line">                                              height,</div><div class="line">                                              SDL_WINDOW_OPENGL);</div><div class="line">    if (sdl_window == NULL)&#123;</div><div class="line">        LOG_I(&quot;窗口创建失败&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第三步：创建渲染器-&gt;渲染窗口(OpenGL ES)</div><div class="line">    //最新一期VIP课程</div><div class="line">    //参数一：渲染目标窗口</div><div class="line">    //参数二：从哪里开始渲染(-1:默认从第一个为止开始)</div><div class="line">    //参数三：渲染类型</div><div class="line">    //SDL_RENDERER_SOFTWARE:软件渲染</div><div class="line">    //...</div><div class="line">    SDL_Renderer* sdl_renderer = SDL_CreateRenderer(sdl_window, -1, 0);</div><div class="line"></div><div class="line">    //第四步：创建纹理</div><div class="line">    //参数一：纹理目标渲染器</div><div class="line">    //参数二：渲染格式</div><div class="line">    //参数三：绘制方式(SDL_TEXTUREACCESS_STREAMING:频繁绘制)</div><div class="line">    //参数四：纹理宽</div><div class="line">    //参数五：纹理高</div><div class="line">    SDL_Texture * sdl_texture = SDL_CreateTexture(sdl_renderer,</div><div class="line">                                                  SDL_PIXELFORMAT_IYUV,</div><div class="line">                                                  SDL_TEXTUREACCESS_STREAMING,</div><div class="line">                                                  width,</div><div class="line">                                                  height);</div><div class="line"></div><div class="line">    //第五步：设置纹理数据-&gt;播放YUV视频</div><div class="line">    //着色器语言(着色器)、渲染器、纹理等等...</div><div class="line">    //第一点：打开YUV文件(手机：)</div><div class="line">    FILE* yuv_file = fopen(&quot;/storage/emulated/0/DreamTestFile/Test.yuv&quot;,&quot;rb+&quot;);</div><div class="line">    if (yuv_file == NULL)&#123;</div><div class="line">        LOG_I(&quot;文件打开失败&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第二点：循环读取YUV视频像素数据格式每一帧画面-&gt;渲染-&gt;设置纹理数据</div><div class="line">    //定义缓冲区(内存空间开辟多大?)</div><div class="line">    //Y:U:V = 4 : 1 : 1</div><div class="line">    //假设：Y = 1.0  U = 0.25  V = 0.25</div><div class="line">    //宽度：Y + U + V = 1.5</div><div class="line">    //换算：Y + U + V = width * height * 1.5</div><div class="line">    char buffer_pix[width * height * 3 / 2];</div><div class="line"></div><div class="line">    //定义渲染器区域</div><div class="line">    SDL_Rect sdl_rect;</div><div class="line">    while (true)&#123;</div><div class="line">        //一行一行的读取</div><div class="line">        fread(buffer_pix, 1, width * height * 3 / 2, yuv_file);</div><div class="line">        //判定是否读取完毕</div><div class="line">        if (feof(yuv_file))&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //设置纹理数据</div><div class="line">        //参数一：目标纹理对象</div><div class="line">        //参数二：渲染区域(NULL:表示默认屏幕窗口宽高)</div><div class="line">        //参数三：视频像素数据</div><div class="line">        //参数四：帧画面宽</div><div class="line">        SDL_UpdateTexture(sdl_texture, NULL, buffer_pix, width);</div><div class="line"></div><div class="line">        //第六步：将纹理数据拷贝到渲染器</div><div class="line">        sdl_rect.x = 0;</div><div class="line">        sdl_rect.y = 0;</div><div class="line">        sdl_rect.w = width;</div><div class="line">        sdl_rect.h = height;</div><div class="line"></div><div class="line">        //先清空</div><div class="line">        SDL_RenderClear(sdl_renderer);</div><div class="line">        //再渲染</div><div class="line">        SDL_RenderCopy(sdl_renderer,sdl_texture,NULL,&amp;sdl_rect);</div><div class="line"></div><div class="line">        //第七步：显示帧画面</div><div class="line">        SDL_RenderPresent(sdl_renderer);</div><div class="line"></div><div class="line">        //第八步：延时渲染(没渲染一帧间隔时间)</div><div class="line">        SDL_Delay(20);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //第九步：是否内存</div><div class="line">    fclose(yuv_file);</div><div class="line"></div><div class="line">    SDL_DestroyTexture(sdl_texture);</div><div class="line"></div><div class="line">    SDL_DestroyRenderer(sdl_renderer);</div><div class="line"></div><div class="line"></div><div class="line">    //第十步：推出SDL程序</div><div class="line">    SDL_Quit();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的源码只是演示如何播放yuv格式视频，当然在实际项目中还需要根据具体业务加入具体业务逻辑，在播放网络流的情况下还需要处理音频和视频间的同步和时间戳问题。这里推荐一个<a href="http://dranger.com/ffmpeg/ffmpeg.html" target="_blank" rel="external">SDL和FFmpeg的国外教程</a>，很实用的一个教程。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/samychen/SDL_FFmpeg_Tutorial" target="_blank" rel="external">https://github.com/samychen/SDL_FFmpeg_Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今天的主题是播放yuv格式视频。&lt;br&gt;在上两篇博客里面介绍过了如何将视频解码为单独的视频和音频，但是如果播放这些格式的文件呢，安卓原生是没有这些控件来直播播放yuv格式视频的，必须通过借助其他方式来播放，今天就介绍SDL2来解码播放yuv文件。&lt;/
      
    
    </summary>
    
      <category term="安卓直播开发" scheme="http://samychen.com/categories/%E5%AE%89%E5%8D%93%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>视频编解码学习二 pcm</title>
    <link href="http://samychen.com/2017/08/29/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%BA%8C-pcm/"/>
    <id>http://samychen.com/2017/08/29/视频编解码学习二-pcm/</id>
    <published>2017-08-29T12:13:48.000Z</published>
    <updated>2018-01-25T12:14:36.325Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天的主题是音频解码，主要实现将视频中的音频解码为音频采用格式pcm。<br>首先在文章开头给出两个问题</p><p>第一个问题：音频解码和视频解码目的是什么？为什么要进行音频压缩或者是视频压缩？<br>目的：压缩音频流、视频流、字幕流等等…（减小数据量）</p><p>第二个问题：音频采样数据作用？<br>保存音频中每一个采样点的值</p><p>我们来计算2分钟pcm音频的大小:<br>规定：采样率:44100HZ<br>在图像学中：每8位 = 1字节<br>编码（采样精度）：16位 = 2字节<br>声道数量：2个<br>pcm格式体积 = 2 <em> 60 </em> 44100 <em> 2 </em> 2 = 21MB<br>mp3 = 2MB</p><p>从计算过程就可以看出，实际情况必须采用压缩来存储音频。</p><p>那么pcm有哪些格式，我们平常说的单声道，双声道又是什么回事？这里又分两种情况<br>第一种:单声道(左右声道)<br>第二种:双声道(排版顺序”左右”,”左右”)<br>二者都是采样点顺序排版存储<br><img src="http://upload-images.jianshu.io/upload_images/4398977-95a2b92724521c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>那么音频解码的环节又是怎样的过程呢，参照官方给出的流程图<br><img src="http://upload-images.jianshu.io/upload_images/4398977-33571f7eaa809c60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FFmpeg解码"><br>从上图我们可以看出音频解码流程<br>        第一步：注册所有的组件（编解码、滤镜特效处理库、封装格式处理库、工具库、音频采样数据格式转换库、视频像素数据格式转换等等…）<br>        第二步：获取音频封装格式信息<br>        第三步：查找音频流<br>        第四步：查找音频解码器<br>        第五步：打开音频解码器<br>        第六步：读取音频压缩数据进行解码（循环解码）<br>        第七步：关闭音频解码器释放内存</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div></pre></td><td class="code"><pre><div class="line">#include &lt;jni.h&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">//导入android-log日志</div><div class="line">#include &lt;android/log.h&gt;</div><div class="line"></div><div class="line">//当前C++兼容C语言</div><div class="line">extern &quot;C&quot;&#123;</div><div class="line">//avcodec:编解码(最重要的库)</div><div class="line">#include &quot;libavcodec/avcodec.h&quot;</div><div class="line">//avformat:封装格式处理</div><div class="line">#include &quot;libavformat/avformat.h&quot;</div><div class="line">//avutil:工具库(大部分库都需要这个库的支持)</div><div class="line">#include &quot;libavutil/imgutils.h&quot;</div><div class="line">//swscale:视频像素数据格式转换</div><div class="line">#include &quot;libswscale/swscale.h&quot;</div><div class="line">//导入音频采样数据格式转换库</div><div class="line">#include &quot;libswresample/swresample.h&quot;</div><div class="line"></div><div class="line">JNIEXPORT void JNICALL Java_com_samychen_ffmpeg_FFmpegTest_ffmpegTest</div><div class="line">        (JNIEnv *, jobject);</div><div class="line">JNIEXPORT void JNICALL Java_com_samychen_ffmpeg_FFmpegTest_ffmpegDecoder</div><div class="line">        (JNIEnv *env, jobject jobj,jstring jInFilePath,jstring jOutFilePath);</div><div class="line">JNIEXPORT void JNICALL Java_com_samychen_ffmpeg_FFmpegTest_ffmpegDecoderAudio</div><div class="line">        (JNIEnv *env, jobject jobj,jstring jInFilePath,jstring jOutFilePath);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//1、NDK音视频编解码：FFmpeg-测试配置</div><div class="line">JNIEXPORT void JNICALL Java_com_samychen_ffmpeg_FFmpegTest_ffmpegTest(</div><div class="line">        JNIEnv *env, jobject jobj) &#123;</div><div class="line">    //(char *)表示C语言字符串</div><div class="line">    const char *configuration = avcodec_configuration();</div><div class="line">    __android_log_print(ANDROID_LOG_INFO,&quot;main&quot;,&quot;%s&quot;,configuration);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//NDK音视频编解码：FFmpeg-音频解码-音频采样数据pcm格式</div><div class="line">JNIEXPORT void JNICALL Java_com_samychen_ffmpeg_FFmpegTest_ffmpegDecoderAudio</div><div class="line">        (JNIEnv *env, jobject jobj,jstring jInFilePath,jstring jOutFilePath) &#123;</div><div class="line"></div><div class="line">    //第一步：注册所有的组件</div><div class="line">    // （编解码、滤镜特效处理库、封装格式处理库、工具库、音频采样数据格式转换库、视频像素数据格式转换等等...）</div><div class="line">    av_register_all();</div><div class="line">    avcodec_register_all();</div><div class="line">    //第二步：获取音频封装格式信息</div><div class="line">    AVFormatContext *avformat_context = avformat_alloc_context();</div><div class="line">    //参数一：封装格式上下文-&gt;保存了音频信息</div><div class="line">    //参数二：输入文件(你要对那一个文件进行解封装)</div><div class="line">    //普及知识：env是JNI环境指针(作用：专门用于管理对象创建和销毁)</div><div class="line">    const char *cInFilePath = env-&gt;GetStringUTFChars(jInFilePath, NULL);</div><div class="line">    //参数三：封装格式类型(NULL：表示系统自动获取格式类型)</div><div class="line">    //返回值：avformat_open_input_result = 0表示成功，否则失败</div><div class="line">    int avformat_open_input_result = avformat_open_input(&amp;avformat_context, cInFilePath, NULL,</div><div class="line">                                                         NULL);</div><div class="line">    if (avformat_open_input_result != 0) &#123;</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avformat_open_input_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;获取失败，错误信息：%s&quot;, error_info);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第三步：查找音频流</div><div class="line">    //返回值：&gt;=0 if OK, AVERROR_xxx on error(&gt;=0表示成功，否则失败)</div><div class="line">    int avformat_find_stream_info_result = avformat_find_stream_info(avformat_context, NULL);</div><div class="line">    if (avformat_find_stream_info_result &lt; 0) &#123;</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avformat_find_stream_info_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;查找失败，错误信息：%s&quot;, error_info);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //第四步：查找音频解码器</div><div class="line">    //第一点：查找音频流索引位置</div><div class="line">    int av_stream_index_audio = -1;</div><div class="line">    for (int i = 0; i &lt; avformat_context-&gt;nb_streams; ++i) &#123;</div><div class="line">        if (avformat_context-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</div><div class="line">            av_stream_index_audio = i;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (av_stream_index_audio == -1) &#123;</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;没有找到音频流&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第二点：查找音频解码器上下文(根据流索引位置-&gt;获取音频解码买上下文)</div><div class="line">    //新的API</div><div class="line">//    AVCodecParameters *avcodec_parameters = avformat_context-&gt;streams[av_stream_index_audio]-&gt;codecpar;</div><div class="line">//    avcodec_parameters-&gt;codec_id;</div><div class="line"></div><div class="line">    //老的API</div><div class="line">    AVCodecContext *avcodec_context = avformat_context-&gt;streams[av_stream_index_audio]-&gt;codec;</div><div class="line"></div><div class="line"></div><div class="line">    //第三点：根据音频解码器上下文-&gt;获取到-&gt;音频解码器</div><div class="line">    AVCodec *avcodec = avcodec_find_decoder(avcodec_context-&gt;codec_id);</div><div class="line">    if (avcodec == NULL) &#123;</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;找不到这个音频解码器&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //第五步：打开音频解码器(调试运行-&gt;观察锁定C/C++基于NDK开发异常-&gt;便于调试运行)</div><div class="line">    int avcodec_open2_result = avcodec_open2(avcodec_context, avcodec, NULL);</div><div class="line">    if (avcodec_open2_result != 0) &#123;</div><div class="line">        char *error_info;</div><div class="line">        av_strerror(avcodec_open2_result, error_info, 1024);</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;打开音频解码器失败，错误信息：%s&quot;, error_info);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //打印音频信息</div><div class="line">    //输出视频信息</div><div class="line">    //输出：文件格式</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;文件格式：%s&quot;, avformat_context-&gt;iformat-&gt;name);</div><div class="line">    //输出：解码器名称</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;解码器名称：%s&quot;, avcodec-&gt;name);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //第六步：读取音频压缩数据进行解码（循环解码）</div><div class="line"></div><div class="line">    //读取一帧音频压缩数据(缓冲区)</div><div class="line">    AVPacket *av_packet = (AVPacket *) av_malloc(sizeof(AVPacket));</div><div class="line"></div><div class="line">    //接收一帧音频采样数据(缓冲区)</div><div class="line">    AVFrame *av_frame_in = av_frame_alloc();</div><div class="line"></div><div class="line">    //音频解码返回结果</div><div class="line">    int avcodec_receive_frame_result;</div><div class="line"></div><div class="line">    //音频采样数据上下文-&gt;SwrContext</div><div class="line">    //第一点：创建上下文-&gt;开辟内存空间(声明)</div><div class="line">    SwrContext *swr_context = swr_alloc();</div><div class="line">    //第二点：给我们的音频采样数据上下文-&gt;绑定数据</div><div class="line">    //参数一：音频采样数据上下文</div><div class="line">    //参数二：输出声道布局类型(立体声、环绕、室内等等...)</div><div class="line">    //立体声</div><div class="line">    int out_ch_layout = AV_CH_LAYOUT_STEREO;</div><div class="line">    //参数三：输出音频采样数据格式(说白了：采样精度)</div><div class="line">    AVSampleFormat av_sample_format = AV_SAMPLE_FMT_S16;</div><div class="line">    //参数四：输出音频采样数据-&gt;采样率</div><div class="line">    int out_sample_rate = avcodec_context-&gt;sample_rate;</div><div class="line">    //参数五：输入声道布局类型(立体声、环绕、室内等等...)-&gt;默认格式</div><div class="line">    int in_ch_layout = av_get_default_channel_layout(avcodec_context-&gt;channels);</div><div class="line">    //参数六：输入音频采样数据格式(说白了：采样精度)</div><div class="line">    AVSampleFormat in_sample_fmt = avcodec_context-&gt;sample_fmt;</div><div class="line">    //参数七：输入音频采样数据-&gt;采样率</div><div class="line">    int in_sample_rate = avcodec_context-&gt;sample_rate;</div><div class="line">    //参数八：Log日志偏移量</div><div class="line">    //参数九：Log日志统计上下文</div><div class="line">    swr_alloc_set_opts(swr_context,</div><div class="line">                       out_ch_layout,</div><div class="line">                       av_sample_format,</div><div class="line">                       out_sample_rate,</div><div class="line">                       in_ch_layout,</div><div class="line">                       in_sample_fmt,</div><div class="line">                       in_sample_rate,</div><div class="line">                       0, NULL);</div><div class="line"></div><div class="line">    //输出音频采样数据缓冲区(目标)-&gt;人的耳朵最大采样率-&gt;44100HZ</div><div class="line">    int out_count = 16000;</div><div class="line">    uint8_t *out_buffer = (uint8_t *) av_malloc(out_count);</div><div class="line">    int pktsize, flush_complete = 0;</div><div class="line">    //获取声道数量</div><div class="line">    int out_nb_layout = av_get_channel_layout_nb_channels(out_ch_layout);</div><div class="line"></div><div class="line">    //打开文件</div><div class="line">    const char *coutputFilePath = env-&gt;GetStringUTFChars(jOutFilePath, NULL);</div><div class="line">    FILE *out_file_pcm = fopen(coutputFilePath, &quot;wb+&quot;);</div><div class="line">    if (out_file_pcm == NULL) &#123;</div><div class="line">        __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;文件不存在&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int frame_index = 0;</div><div class="line">//    while (av_read_frame(avformat_context, av_packet) == 0) &#123;</div><div class="line">//        ++frame_index;</div><div class="line">//        if (av_packet-&gt;stream_index == av_stream_index_audio) &#123;</div><div class="line">//            out_buffer = av_packet-&gt;data;</div><div class="line">//            pktsize = av_packet-&gt;size;</div><div class="line">//            int frameFinished = 0;</div><div class="line">//            int len = avcodec_decode_audio4(avcodec_context, av_frame_in, &amp;frameFinished,</div><div class="line">//                                            av_packet);</div><div class="line">//            if (frameFinished) &#123;</div><div class="line">//                pktsize -= len;</div><div class="line">//                out_buffer += len;</div><div class="line">//                int data_size = av_samples_get_buffer_size(NULL,</div><div class="line">//                                                           out_nb_layout,</div><div class="line">//                                                           av_frame_in-&gt;nb_samples,</div><div class="line">//                                                           av_sample_format,</div><div class="line">//                                                           1);</div><div class="line">//                /*****************************************************</div><div class="line">//                以下代码使用swr_convert函数进行转换，但是转换后的文件连mp3到pcm文件都不能播放了，所以注释了</div><div class="line">//                const uint8_t *in[] = &#123;frame-&gt;data[0]&#125;;</div><div class="line">//</div><div class="line">//                int len=swr_convert(swrContext,out,sizeof(audio_buf)/codecContext-&gt;channels/av_get_bytes_per_sample(AV_SAMPLE_FMT_S16P),</div><div class="line">//                    in,frame-&gt;linesize[0]/codecContext-&gt;channels/av_get_bytes_per_sample(codecContext-&gt;sample_fmt));</div><div class="line">//</div><div class="line">//                len=len*codecContext-&gt;channels*av_get_bytes_per_sample(AV_SAMPLE_FMT_S16P);</div><div class="line">//</div><div class="line">//                if (len &lt; 0) &#123;</div><div class="line">//                    fprintf(stderr, &quot;audio_resample() failed\n&quot;);</div><div class="line">//                    break;</div><div class="line">//                &#125;</div><div class="line">//                if (len == sizeof(audio_buf) / codecContext-&gt;channels / av_get_bytes_per_sample(AV_SAMPLE_FMT_S16P)) &#123;</div><div class="line">//                    fprintf(stderr, &quot;warning: audio buffer is probably too small\n&quot;);</div><div class="line">//                    swr_init(swrContext);</div><div class="line">//                &#125;</div><div class="line">//                *****************************************************/</div><div class="line">//                char *data = (char *) malloc(data_size);</div><div class="line">//                short *sample_buffer = (short *) av_frame_in-&gt;data[0];</div><div class="line">//                for (int i = 0; i &lt; data_size / 2; i++) &#123;</div><div class="line">//                    data[i * 2] = (char) (sample_buffer[i / 2] &amp; 0xFF);</div><div class="line">//                    data[i * 2 + 1] = (char) ((sample_buffer[i / 2] &gt;&gt; 8) &amp; 0xFF);</div><div class="line">//</div><div class="line">//                &#125;</div><div class="line">//                fwrite(data, data_size, 1, out_file_pcm);</div><div class="line">//                fflush(out_file_pcm);</div><div class="line">//            &#125;</div><div class="line">//        &#125;</div><div class="line">        //返回值：&lt;0表示读取完毕，否则正在读取</div><div class="line">        while (av_read_frame(avformat_context, av_packet) &gt;= 0) &#123;</div><div class="line">            //判定当前帧是否是音频流-&gt;音频采样数据</div><div class="line">            if (av_packet-&gt;stream_index == av_stream_index_audio) &#123;</div><div class="line">                //确定是我们的音频流-&gt;解码</div><div class="line">                //解码一帧音频流数据</div><div class="line">                //老的API</div><div class="line">                //avcodec_decode_audio4();</div><div class="line">                //新的API(发送-&gt;接收)</div><div class="line">                //发送</div><div class="line">                avcodec_send_packet(avcodec_context, av_packet);</div><div class="line">                //接收</div><div class="line">                avcodec_receive_frame_result = avcodec_receive_frame(avcodec_context, av_frame_in);</div><div class="line"></div><div class="line">                if (avcodec_receive_frame_result == 0) &#123;</div><div class="line">                    //解码一帧音频压缩数据成功-&gt;得到了-&gt;一帧音频采样数据</div><div class="line">                    //音频采样数据-&gt;转成pcm格式</div><div class="line">                    //将输入-&gt;输出(pcm格式)</div><div class="line">                    //参数一：音频采样数据上下文-&gt;SwrContext</div><div class="line">                    //参数二：输出音频采样数据缓冲区(目标)</div><div class="line">                    //参数三：输出缓冲区大小</div><div class="line">                    //参数四：输入音频采样数据缓冲区</div><div class="line">                    //参数五：输入缓冲区大小</div><div class="line">                    swr_convert(swr_context,</div><div class="line">                                &amp;out_buffer,</div><div class="line">                                out_count,</div><div class="line">                                (const uint8_t **) av_frame_in-&gt;data,</div><div class="line">                                av_frame_in-&gt;nb_samples);</div><div class="line">                    //获取缓冲区实际数据大小</div><div class="line">                    //参数一：行大小</div><div class="line">                    //参数二：声道数量</div><div class="line">                    //参数三：输出大小</div><div class="line">                    //参数四：输出音频采样数据格式</div><div class="line">                    //参数五：字节对齐类型</div><div class="line">                    int out_buffer_size = av_samples_get_buffer_size(NULL,</div><div class="line">                                                                     out_nb_layout,</div><div class="line">                                                                     av_frame_in-&gt;nb_samples,</div><div class="line">                                                                     av_sample_format,</div><div class="line">                                                                     1);</div><div class="line">                    //写入文件</div><div class="line">                    fwrite(av_frame_in-&gt;data[0], 1, out_buffer_size, out_file_pcm);</div><div class="line">                    fflush(out_file_pcm);</div><div class="line">                    frame_index++;</div><div class="line">                    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;当前是第%d帧&quot;, frame_index);</div><div class="line">                    __android_log_print(ANDROID_LOG_INFO, &quot;main&quot;, &quot;当前是第%d帧&quot;, out_buffer);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //第七步：关闭音频解码器释放内存</div><div class="line">        av_packet_free(&amp;av_packet);</div><div class="line">        //关闭流</div><div class="line">        fclose(out_file_pcm);</div><div class="line"></div><div class="line">        swr_free(&amp;swr_context);</div><div class="line"></div><div class="line">        av_free(out_buffer);</div><div class="line"></div><div class="line">        avcodec_close(avcodec_context);</div><div class="line">        avformat_free_context(avformat_context);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>是不是和视频解码大体流程完全一样，唯一的区别就是视频像素数据格式的转换和音频采样数据的重新采样了。<br>上述代码实现完成之后可以在pc端下载Adobe audition cs6来直接播放</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/samychen/SDL_FFmpeg_Tutorial" target="_blank" rel="external">https://github.com/samychen/SDL_FFmpeg_Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今天的主题是音频解码，主要实现将视频中的音频解码为音频采用格式pcm。&lt;br&gt;首先在文章开头给出两个问题&lt;/p&gt;
&lt;p&gt;第一个问题：音频解码和视频解码目的是什么？为什么要进行音频压缩或者是视频压缩？&lt;br&gt;目的：压缩音频流、视频流、字幕流等等…（减小
      
    
    </summary>
    
      <category term="安卓直播开发" scheme="http://samychen.com/categories/%E5%AE%89%E5%8D%93%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
